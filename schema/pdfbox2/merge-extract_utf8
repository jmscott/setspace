#!/bin/bash
#
#  Synopsis:
#	Extract UTF8 text from PDF and store results in PostgreSQL.
#  Usage:
#	merge-extract_utf8 <udig>
#  Exit Status:
#	0	extracted utf8 text and tuple stored in PostgreSQL
#	1	pdf failed to load and tuple stored in PostgreSQL
#	2	blob does not exist
#	3	wrong number of arguments
#	4	PDFBOX2_JAR not defined or file does not exist
#	5	blobio error
#	6	java ExtractText unexpected exit status
#	7	Error proving extracted text is well formed UTF8
#	8	pg database error
#  Java Environment:
#	The jar of pdfbox, version 2, must be in the CLASSPATH.
#  Environment:
#	BLOBIO_ALGORITHM
#	BLOBIO_SERVICE
#	BLOBIO_RO_SERVICE
#	PDFBOX2_JAR
#  Note:
#	Why does ExtractText depend on explicit jar file.  Seems like
#	setting CLASSPATH ought to good enough.
#

PROG=merge-extract_utf8

TMP_BLOB=${TMPDIR:=/tmp}/$PROG-$$.pdf
TMP_ERR=${TMPDIR:=/tmp}/$PROG-$$.err
TMP_UTF8=${TMPDIR:=/tmp}/$PROG-$$.utf8

leave()
{
	#  Note:  can rm changed exit status of script?

	rm -f $TMP_BLOB $TMP_ERR $TMP_UTF8
}
trap leave EXIT

die()
{
	STATUS=$2
	echo "$PROG: ERROR: $1" >&2
	exit $STATUS
}

put_file()
{
	FP=$1
	if [ ! -s $FP ];  then
		echo null
		return 0
	fi
	WHAT=$2

	DIG=$(
		blobio eat					\
			--input-path $FP			\
			--algorithm $BLOBIO_ALGORITHM		\
	)
	test $? = 0 ||  die "$WHAT: blobio eat failed: exit status=$?" 5

	#  write the blob

	FILE_UDIG=$BLOBIO_ALGORITHM:$DIG
	blobio put --udig $FILE_UDIG --input-path $FP --service $BLOBIO_SERVICE
	test $? = 0 || die "$WHAT: blobio put failed: exit status=$?" 5

	#  stringify udig for postgresql

	echo "'"$FILE_UDIG"'"
}

test $# = 1 || die 'wrong number of arguments' 3
PDF_UDIG=$1

#  Note: why not just CLASSPATH?

test -n "$PDFBOX2_JAR" || die "environment not defined: PDFBOX2_JAR" 4
test -e $PDFBOX2_JAR || die "jar file does not exist: $PDFBOX2_JAR" 4

#  fetch the pdf blob

blobio get --udig $PDF_UDIG --output-path $TMP_BLOB --service $BLOBIO_RO_SERVICE
STATUS=$?
case $STATUS in
0)
	;;
1)
	exit 2
	;;
*)
	die 'blobio get failed' 5
	;;
esac

#  execute the java extract, faulting if exit_code > 1

java -jar $PDFBOX2_JAR ExtractText $TMP_BLOB $TMP_UTF8 2>$TMP_ERR
EXIT_STATUS=$?
test $EXIT_STATUS = 0 -o $EXIT_STATUS = 1 ||
		die "java ExtractText failed: exit status=$EXIT_STATUS" 6

#  insure the extracted text is well formed UTF8;
#  otherwise, set UTF8 udig to sql null.

if [ -s $TMP_UTF8 ];  then
	is-utf8wf <$TMP_UTF8
	STATUS=$?
	test $STATUS -le 1 || die "is-utf8wf failed: exit status=$?" 7

	if [ $STATUS -eq 0 ];  then

		#  valid utf8 so put the blob

		UTF8_BLOB=$(put_file $TMP_UTF8 'extract utf8')
		test $? = 0 || exit 5
	else
		UTF8_BLOB=null
	fi
else
	UTF8_BLOB=null
fi

#  put any stderr err of the extract

STDERR_BLOB=$(put_file $TMP_ERR 'extract stderr')
test $? = 0 || exit 5

#  merge the extract_utf8 tuple into postgres and zap the pending tuple

psql --no-psqlrc --quiet <<EOF || die "psql insert failed: exit status=$?" 8

\\set ON_ERROR_STOP on

BEGIN TRANSACTION;

INSERT INTO
  pdfbox2.extract_utf8(
  	blob,
	exit_status,
	utf8_blob,
	stderr_blob
    ) VALUES (
    	'$PDF_UDIG',
	$EXIT_STATUS,
	$UTF8_BLOB,
	$STDERR_BLOB
    ) ON CONFLICT
    	DO NOTHING
;
DELETE FROM pdfbox2.extract_utf8_pending
  WHERE
  	blob = '$PDF_UDIG'
;

END TRANSACTION;

EOF

exit $EXIT_STATUS
