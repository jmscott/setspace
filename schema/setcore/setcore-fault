#!/usr/bin/env bash
#
#  Synopsis:
#	Setcore fault, writing records into run/$COMMAND_NAME.fault and setops
#  Usage:
#	setcore-fault <command> <udig> <msg>
#

#  do not fault out even with bad error.  do best effort to get
#  something into database

NOW=$(date '+%Y/%m/%d %H:%M:%S')
APPEND_FLTX=$SETSPACE_ROOT/schema/setops/sbin/append-fltx
RUN=$SETSPACE_ROOT/schema/setcore/run

#  what happens when this fault script itself faults?
#  do best attempt to burp out *something*

fault_fault()
{
	local MSG="$COMMAND_NAME: $@"
	local FAULT=$RUN/setcore-fault.fault

	echo "$NOW: $MSG" >>$RUN

	echo "$MSG" >&2
	exit 2
}

test $# = 3 || fault_fault "wrong argument count: got $#, need 3"

COMMAND_NAME=$1
BLOB=$2
MSG=$3

test -n "$MSG" || fault_fault 'empty message (arg#3)'

echo "$NOW: ERROR: $MSG" >>$RUN/$COMMAND_NAME.fault			||
	fault_fault "echo >>$RUN/$COMMAND_NAME.fault failed: exit status=$?"

echo "ERROR: $COMMAND_NAME: $MSG" >&2

STDOUT=/dev/null
test -f STDOUT && STDOUT=STDOUT

#  combine MSG and process stderr into single file STDERR

if [ -f STDERR ];  then
	(
		echo $MSG;
		cat STDERR
	) >STDERR.both || fault_fault "cat STDERR.both failed: exit status=$?"

	STDERR=STDERR.both
else
	echo $MSG >STDERR						||
		fault_fault "echo MSG >STDERR failed: exit status=$?"
	STDERR=STDERR
fi
	
$APPEND_FLTX								\
	setcore								\
	+flowd								\
	$COMMAND_NAME							\
	$BLOB								\
	ERR								\
	2								\
	0								\
	$STDOUT								\
	$STDERR
STATUS=$?
test $STATUS = 0 || fault_fault "append-fltx failed: exit status=$STATUS"

exit 0
