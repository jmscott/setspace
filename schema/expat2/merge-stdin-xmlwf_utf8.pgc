/*
 *  Synopsis:
 *  	Merge stdout of command xmlwf into table expat2.xmlwf.
 *  Usage:
 *	merge-stdin-xmlwf_utf8 <udig> <sizeof-stdin> <wmlwf-exit-status>
 *  Exit Status:
 *  	0	ok, tuples were merged into tables xmlwf_utf8[_exit_status].
 *  	1	unexpected error
 */

#include "jmscott/libjmscott.h"
#include <stdlib.h>			//  for malloc()

char *jmscott_progname = "merge-stdin-xmlwf_utf8";

static struct jmscott_ecpg_state_fault no_warn[] =
{
        {"02000", -1},                //  no data for conflict on upsert/insert
        {(char *)0, -1}
};

static void
die(char *msg)
{
	jmscott_die(1, msg);
}

static void
die2(char *msg1, char *msg2)
{
	jmscott_die2(1, msg1, msg2);
}

int
main(int argc, char **argv)
{
	size_t size;
	char *err;

EXEC SQL BEGIN DECLARE SECTION;
	VARCHAR blob[8+1+128+1];		//  algo:digest<null>
	int exit_status;
	char *stdout;
EXEC SQL END DECLARE SECTION;

	if (argc != 4)
		die("wrong number of arguments");

	close(1);

	//  parse the blob udig

	if ((err = jmscott_frisk_udig(argv[1])))
		die2("can not parse udig", err);


	//  parse the size of the blob

	if ((err = jmscott_a2size_t(argv[2], &size)))
		die2("can not parse blob size", err);

	//  parse the exit status of process xmlwf

	if ((err = jmscott_a2size_t(argv[3], (size_t *)&exit_status)))
		die2("can not parse exit status size", err);
	if (exit_status > 255)
		die("exit status > 255");

	//  allocate the xml buffer plus null byte

	stdout = malloc(size + 1);
	if (stdout == NULL)
		die2("malloc(blob) failed", argv[2]);
	stdout[size] = 0;

	if (size > 0) {
		int status = jmscott_read_exact(0, stdout, size);

		if (status < 0) {
			if (status == -1) {
				err = strerror(errno);
				die2("read(stdin) failed", err);
			}
			if (status == -2)
				die("read(stdin): unexpected end of file");
			die("jmscott_read_exact(): impossible return value");
		} else if (status != 0)
			die("jmscott_read_exact(): impossible return value");
	}
	//  copy the blob into SQL varchar
	{
		int len = strlen(argv[1]);
		memcpy(blob.arr, argv[1], len);
		blob.arr[len] = 0;
		blob.len = len;
	}

	EXEC SQL WHENEVER SQLERROR CALL jmscott_ecpg_error(
		(struct jmscott_ecpg_state_fault *)0
	);
	EXEC SQL WHENEVER SQLWARNING CALL jmscott_ecpg_warning(no_warn);
	EXEC SQL CONNECT TO default;

	EXEC SQL BEGIN TRANSACTION;

	/*
	 *  Merge blob into expat2.xmlwf_utf8 table.
	 */
	EXEC SQL INSERT INTO expat2.xmlwf_utf8(
		blob,
		stdout
	  ) VALUES (
		:blob::udig,
		:stdout
	  )
  	  ON CONFLICT
  		DO NOTHING
	;
	/*
	 *  Merge process exit status into xmlwf_utf8_exit_status table.
	 *  Table xmlwf_utf8_exit_status exists instead of as a field in
	 *  xmlwf_utf8 because expat2 xmlwf broke api of exit status.
	 */
	EXEC SQL INSERT INTO expat2.xmlwf_utf8_exit_status(
		blob,
		status
	  ) VALUES (
		:blob::udig,
		:exit_status
	  )
  	  ON CONFLICT
  		DO NOTHING
	;
	EXEC SQL END TRANSACTION;

	_exit(0);
}
