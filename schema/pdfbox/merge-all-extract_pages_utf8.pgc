/*
 *  Synopsis:
 *  	Merge all pages into tables extract_pages_utf8, page_{text,tsv}_utf8.
 *  Usage:
 *	merge-all-extract_pages_utf8 <udig> <tsv_config>
 *  Arguments:
 *  	1	udig of the pdf blob
 *	2	tsv vector configuration
 *  Exit Status:
 *  	0	ok, all pages were merged
 *  	1	program invocation error
 *  	2	malloc() failed
 *	3	file system i/o error
 *	4	sql error
 *	5	sql warning
 */

static char progname[] = "merge-stdin-page_text_utf8";

#define EXIT_OK		0
#define EXIT_BAD_INVO	1
#define EXIT_BAD_MALLOC 2

//  map all various of i/o errors into same error code
#define EXIT_BAD_READ	3
#define EXIT_BAD_WRITE	3
#define EXIT_BLOB_SMALL	3
#define EXIT_BLOB_BIG	3

#define EXIT_SQLERROR	4
#define EXIT_SQLWARN	5

#define COMMON_NEED_READ_BLOB
#define COMMON_NEED_A2UI32
#include "../../common.c"

#define COMMON_ECPG_NEED_SQL_WARNING
#define COMMON_ECPG_NEED_SQL_ERROR
#include "../../common-ecpg.c"

//  ignore these sql warnings

static struct _ecpg_sql_state_fault no_warns[] =
{
	{"02000", -1},	//  no data found due to upsert conflict 
	{(char *)0, -1}
};

int
main(int argc, char **argv)
{
	size_t len;

EXEC SQL BEGIN DECLARE SECTION;
	char *pdf_blob;
	char *txt;
	char *tsv_conf;
	int page_number;
	int txt_size;
EXEC SQL END DECLARE SECTION;

	if (argc != 4)
		die(EXIT_BAD_INVO, "wrong number of arguments");

	close(1);

	//  parse the pdf udig from argv[1]

	pdf_blob = argv[1];
	len = strlen(pdf_blob);
	if (len < 34 || len > 137 || strchr(pdf_blob, ':') == NULL)
		die2(EXIT_BAD_INVO, "syntax error in pdf udig", pdf_blob);

	// the text search configuration
	tsv_conf = argv[2];

	//  allocate buffer to hold entire text of page blob read from stdin

	txt_size = 4096;
	txt = malloc(txt_size + 1);
	if (txt == NULL)
		die(EXIT_BAD_MALLOC, "malloc(txt) failed");

	_read_blob(0, txt, txt_size);

	EXEC SQL WHENEVER SQLERROR CALL _ecpg_sql_error(
		(struct _ecpg_sql_state_fault *)0
	);
	EXEC SQL WHENEVER SQLWARNING CALL _ecpg_sql_warning(no_warns);
	EXEC SQL CONNECT TO default;

	/*
	 *  Merge blob into pdfbox.page_text_utf8 table.
	 */
	EXEC SQL BEGIN TRANSACTION;
	EXEC SQL
	  INSERT INTO pdfbox.page_text_utf8(
		pdf_blob,
		page_number,
		txt
	  ) VALUES (
		:pdf_blob::udig,
		:page_number,
		:txt
	  )
  	  ON CONFLICT
  		DO NOTHING
	;
	EXEC SQL END TRANSACTION;

	_exit(EXIT_OK);
}
