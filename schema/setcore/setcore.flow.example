#
#  Synopsis:
#	Flow blobs into "setcore" schema defined in PostgreSQL database
#  Usage:
#  	flowd server setcore.conf
#  See:
#  	schema/setcore/schema.sql
#	Investigate why 
#  Note:
#

boot
{
	brr_capacity = 256;
	flow_worker_count = 32;
	os_exec_worker_count = 16;
	os_exec_capacity = 8;

	xdr_roll_duration = "168h";
	fdr_roll_duration = "168h";
	qdr_roll_duration = "168h";

	heartbeat_duration = "1m";
}

tail brr
{
	path = "spool/bio4d.brr";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"search_path=setcore,setspace fallback_application_name=flowd.setcore sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 4;
}

sql query blob_state row
{
	result row is (
		in_blob			bool,
		in_byte_prefix_32	bool,
		in_byte_count		bool,
		in_is_utf8wf		bool,
		in_byte_bitmap		bool,
		in_byte_suffix_32	bool,
		is_empty		bool,
		flt_byte_prefix_32	bool,
		flt_byte_count		bool,
		flt_is_utf8wf		bool,
		flt_byte_bitmap		bool,
		flt_byte_suffix_32	bool
	);
	statement = `
	SELECT
		EXISTS (
		  SELECT
			true
		    FROM
			blob
		    WHERE
			blob = $1::udig
		),
		EXISTS (
		  SELECT
			true
		    FROM
			byte_prefix_32
		    WHERE
			blob = $1::udig
		),
		EXISTS (
		  SELECT
			true
		    FROM
			byte_count
		    WHERE
			blob = $1::udig
		),
		EXISTS (
		  SELECT
			true
		    FROM
			is_utf8wf
		    WHERE
			blob = $1::udig
		),
		EXISTS (
		  SELECT
			true
		    FROM
			byte_bitmap
		    WHERE
			blob = $1::udig
		),
		EXISTS (
		  SELECT
			true
		    FROM
			byte_suffix_32
		    WHERE
			blob = $1::udig
		),
		udig_is_empty($1::udig),
		EXISTS (
		  SELECT
		  	true
		    FROM
		    	setops.flowd_call_fault
		    WHERE
		    	schema_name = 'setcore'
			AND
			command_name = 'upsert_byte_prefix_32'
			AND
			blob = $1::udig
		),
		EXISTS (
		  SELECT
		  	true
		    FROM
		    	setops.flowd_call_fault
		    WHERE
		    	schema_name = 'setcore'
			AND
			command_name = 'upsert_byte_count'
			AND
			blob = $1::udig
		),
		EXISTS (
		  SELECT
		  	true
		    FROM
		    	setops.flowd_call_fault
		    WHERE
		    	schema_name = 'setcore'
			AND
			command_name = 'get_is_utf8wf'
			AND
			blob = $1::udig
		),
		EXISTS (
		  SELECT
		  	true
		    FROM
		    	setops.flowd_call_fault
		    WHERE
		    	schema_name = 'setcore'
			AND
			command_name = 'upsert_byte_bitmap'
			AND
			blob = $1::udig
		),
		EXISTS (
		  SELECT
		  	true
		    FROM
		    	setops.flowd_call_fault
		    WHERE
		    	schema_name = 'setcore'
			AND
			command_name = 'upsert_byte_suffix_32'
			AND
			blob = $1::udig
		)
	;`;
}

sync map in_flight[string]bool;
sync map appended_fffile5[string]bool;
sync map appended_prefixio[string]bool;

sql query in_service row
{
	result row is (
		answer	bool
	);
	statement = `
	SELECT EXISTS (
	  SELECT
	  	true
	    FROM
	    	service
	    WHERE
	    	blob = $1::udig
	)`;
}

query in_service(brr.udig)
  when
  	in_flight.LoadOrStore(brr.udig, true).loaded == false
;

query blob_state(brr.udig)
  when
	in_service.answer == false
;

sql exec upsert_blob
{
	statement = `
	INSERT INTO blob (
		blob,
		discover_time
	  ) VALUES (
	  	$1::udig,
		$2::inception
	  ) ON CONFLICT (blob) DO UPDATE SET
	  	discover_time = $2::inception
	    WHERE
	    	blob.discover_time > EXCLUDED.discover_time
	;`;
}

query upsert_blob(brr.udig, brr.start_time)
  when
  	blob_state.in_blob == false
;

command eat_blob
{
	path = "blobio";
	argv = (
		"eat",
		"--service",
		"fs:${BLOBIO_ROOT}",
		"--udig"
	);
	exit_status is OK when in {
		0,			#  blob exists
		1			#  blob does not exist
	};
}

#  see if blob exists physically when blob table or is not empty

call eat_blob(brr.udig)
  when
	(
		blob_state.in_blob == true
		or
		upsert_blob.sqlstate == "00000"
	)
	and
	blob_state.is_empty == false
;

command upsert_byte_prefix_32
{
        path = "sbin/upsert-byte_prefix_32";
        exit_status is OK when in {0, 1};
}

call upsert_byte_prefix_32(brr.udig)
  when
  	eat_blob.exit_status == 0
	and
	blob_state.in_byte_prefix_32 == false
	and
	blob_state.flt_byte_prefix_32 == false
;

command upsert_byte_count
{
        path = "sbin/upsert-byte_count";
        exit_status is OK when in {0, 1};
}

call upsert_byte_count(brr.udig)
  when
  	eat_blob.exit_status == 0
	and
	blob_state.in_byte_count == false
	and
	blob_state.flt_byte_count == false
;

command upsert_byte_bitmap
{
	path = "sbin/upsert-byte_bitmap";
	exit_status is OK when in {0, 1};
}

call upsert_byte_bitmap(brr.udig)
  when
  	eat_blob.exit_status == 0
	and
	blob_state.in_byte_bitmap == false
	and
	blob_state.flt_byte_bitmap == false
;

command upsert_byte_suffix_32
{
        path = "sbin/upsert-byte_suffix_32";
        exit_status is OK when in {0, 1};
}

call upsert_byte_suffix_32(brr.udig)
  when
  	eat_blob.exit_status == 0
	and
	blob_state.in_byte_suffix_32 == false
	and
	blob_state.flt_byte_suffix_32 == false
;

command get_is_utf8wf
{
	path = "sbin/get-is-utf8wf";
	exit_status is OK when in {
		0,			#  is well formed utf8
		1,			#  not well formed utf8
		2,			#  empty blob,
		3			#  blob does not exist
	};
}

sql exec upsert_is_utf8wf
{
	statement = `

	INSERT INTO setcore.is_utf8wf(
		blob,
		is_utf8
	) SELECT
		$1::udig,
		CASE $2 
	  		WHEN '0' THEN true
	  		WHEN '1' THEN false
	  		WHEN '2' THEN false
		END
  	  ON CONFLICT
  		DO NOTHING
	;`;
}

call get_is_utf8wf(brr.udig)
  when
  	blob_state.in_is_utf8wf == false
	and
	blob_state.flt_is_utf8wf == false
	and
	eat_blob.exit_status == 0
;

query upsert_is_utf8wf(brr.udig, get_is_utf8wf.exit_status)
  when
  	get_is_utf8wf.exit_status == 0
	or
  	get_is_utf8wf.exit_status == 1
;

#
#  Note:
#	if fault insert fails then append tuple to ../setops/spool/setcore.fltq
#
sql exec upsert_fault_eat_blob
{
	statement = `
	INSERT INTO setops.flowd_call_fault (
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		fault_time
	) VALUES (
		'setcore',
		'eat_blob',
		$1::udig,
		'ERR',
		$2::smallint,
		now()
	) ON CONFLICT DO NOTHING
	`;
}

query upsert_fault_eat_blob(brr.udig, eat_blob.exit_status)
  when
 	eat_blob.exit_status != 0
	and
	eat_blob.exit_status != 1
;

sql exec upsert_fault_upsert_byte_prefix_32
{
	statement = `
	INSERT INTO setops.flowd_call_fault (
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		fault_time
	) VALUES (
		'setcore',
		'upsert_byte_prefix_32',
		$1::udig,
		'ERR',
		$2::smallint,
		now()
	) ON CONFLICT DO NOTHING
	`;
}

query upsert_fault_upsert_byte_prefix_32(
	brr.udig,
	upsert_byte_prefix_32.exit_status
  ) when
 	upsert_byte_prefix_32.exit_status != 0
	and
	upsert_byte_prefix_32.exit_status != 1
;

sql exec upsert_fault_upsert_byte_count
{
	statement = `
	INSERT INTO setops.flowd_call_fault (
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		fault_time
	) VALUES (
		'setcore',
		'upsert_byte_count',
		$1::udig,
		'ERR',
		$2::smallint,
		now()
	) ON CONFLICT DO NOTHING
	`;
}

query upsert_fault_upsert_byte_count(
	brr.udig,
	upsert_byte_count.exit_status
  ) when
 	upsert_byte_count.exit_status != 0
	and
	upsert_byte_count.exit_status != 1
;

sql exec upsert_fault_upsert_byte_bitmap
{
	statement = `
	INSERT INTO setops.flowd_call_fault (
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		fault_time
	) VALUES (
		'setcore',
		'upsert_byte_bitmap',
		$1::udig,
		'ERR',
		$2::smallint,
		now()
	) ON CONFLICT DO NOTHING
	`;
}

query upsert_fault_upsert_byte_bitmap(
	brr.udig,
	upsert_byte_bitmap.exit_status
  ) when
 	upsert_byte_bitmap.exit_status != 0
	and
	upsert_byte_bitmap.exit_status != 1
;

sql exec upsert_fault_upsert_byte_suffix_32
{
	statement = `
	INSERT INTO setops.flowd_call_fault (
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		fault_time
	) VALUES (
		'setcore',
		'upsert_byte_suffix_32',
		$1::udig,
		'ERR',
		$2::smallint,
		now()
	) ON CONFLICT DO NOTHING
	`;
}

query upsert_fault_upsert_byte_suffix_32(
	brr.udig,
	upsert_byte_suffix_32.exit_status
  ) when
 	upsert_byte_suffix_32.exit_status != 0
	and
	upsert_byte_suffix_32.exit_status != 1
;

sql exec upsert_fault_get_is_utf8wf
{
	statement = `
	INSERT INTO setops.flowd_call_fault (
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		fault_time
	) VALUES (
		'setcore',
		'get_is_utf8wf',
		$1::udig,
		'ERR',
		$2::smallint,
		now()
	) ON CONFLICT DO NOTHING
	`;
}

query upsert_fault_get_is_utf8wf(
	brr.udig,
	get_is_utf8wf.exit_status
  ) when
 	get_is_utf8wf.exit_status != 0
	and
	get_is_utf8wf.exit_status != 1
	and
 	get_is_utf8wf.exit_status != 2
	and
	get_is_utf8wf.exit_status != 3
;

command is_appendable
{
	path = "true";
}

call is_appendable()
  when
	(
		brr.chat_history == "ok"
		or
		brr.chat_history == "ok,ok"
		or
		brr.chat_history == "ok,ok,ok"
	)
	and
	brr.verb != "wrap"
	and
	brr.verb != "roll"
	and
	(
		#  blob already in service
		in_service.answer == true

		#  for all 4 tables either row preexists or just upserted
		or
		(
			(
				blob_state.in_byte_prefix_32 == true
				or
				upsert_byte_prefix_32.exit_status == 0
			)
			and
			(
				blob_state.in_byte_count == true
				or
				upsert_byte_count.exit_status == 0
			)
			and
			(
				blob_state.in_byte_bitmap == true
				or
				upsert_byte_bitmap.exit_status == 0
			)
			and
			(
				blob_state.in_byte_suffix_32 == true
				or
				upsert_byte_suffix_32.exit_status == 0
			)
		)
	)
;

command append_fffile5
{
	path = "append-brr";
	argv = (
		"../fffile5/spool/setcore.brr"
	);
}

call append_fffile5(
		brr.start_time,
 		brr.transport,
 		brr.verb,
		brr.udig,
		brr.chat_history,
		brr.blob_size,
		brr.wall_duration
) when
	is_appendable.exit_status == 0
	and
	appended_fffile5.LoadOrStore(brr.udig, true).loaded == false
;

command append_prefixio
{
	path = "append-brr";
	argv = (
		"../prefixio/spool/setcore.brr"
	);
}

call append_prefixio(
		brr.start_time,
 		brr.transport,
 		brr.verb,
		brr.udig,
		brr.chat_history,
		brr.blob_size,
		brr.wall_duration
) when
	is_appendable.exit_status == 0
	and
	appended_prefixio.LoadOrStore(brr.udig, true).loaded == false
;
