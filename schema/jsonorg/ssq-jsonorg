#!/bin/bash
#
#  Synopsis:
#	Backend libexec for schema jsonorg, invoked by script bin/ssq
#  Usage:
#	ssq jsonorg help
#

PSQL='psql
	--set=ON_ERROR_STOP=1
	--no-psqlrc
	--tuples-only
	--pset null=Unknown
	--quiet
'

die()
{
	echo "ssq-jsonorg: ERROR: $@" >&2
	exit 1
}

help()
{
	cat <<END
Usage: ssq jsonorg [action] <options> ...

Action:
	help

	ls [recent]	#  list recent 10 json blobs
	ls [udig]	#  list details either recent blobs or particular blob
	ls service	#  list blobs in table jsonorg.service, in no order
	ls object	#  list objects in the schema
	refresh 	#  refresh all materialized views
	count		#  count blobs in all tables in jsonorg

Environment:
	SETSPACE_ROOT	$SETSPACE_ROOT
	PGHOST		$PGHOST
	PGPORT		$PGPORT
	PGUSER		$PGUSER
	PGDATABASE	$PGDATABASE
Example:
	ls		#  show recent blobs
	ls <udig>	#  show details on specific blob
	ls service	#  list contents of jsonorg.service, in no order
END
}

ls_service()
{
	$PSQL --no-align <<END
SELECT
	blob
  FROM
  	jsonorg.service
;
END
}

ls_recent()
{
	$PSQL --expanded <<END || die "ls_recent: psql failed: exit status=$?"
SELECT
	srv.blob AS "Blob",
	regexp_replace(age(now(), s.discover_time)::text, '\..*', '') || ' ago'
                AS "Age",
	pg_size_pretty(bc.byte_count) AS "Size"
  FROM
  	jsonorg.service srv
	  JOIN setcore.service s ON (s.blob = srv.blob) 
	  JOIN setcore.byte_count bc ON (bc.blob = srv.blob)
  ORDER BY
  	s.discover_time DESC,
	bc.byte_count DESC,
	srv.blob ASC
  LIMIT
  	10
END
}

refresh()
{
	$PSQL <<END || die "psql refresh failed: exit status=$?"
\\timing on

SELECT
	jsonorg.refresh_stat()
;
END
}

ls_blob()
{
	local BLOB=$1

	#
	#  Note:
	#	How do we know perl regex always enabled?
	#
	[[ $BLOB =~ ^[a-z][a-z0-9]{0,7}:[[:graph:]]{32,128}$ ]]		||
		die "ls_blob: not a udig: $BLOB"
	
	$PSQL --expanded <<END
\\pset tuples_only off

SELECT
	s.blob AS "Blob",
	regexp_replace(age(now(), s.discover_time)::text, '\..*', '') || ' ago'
                AS "Age",
	pg_size_pretty(bc.byte_count) AS "Size"
  FROM
  	jsonorg.service srv
	  JOIN setcore.service s ON (s.blob = srv.blob) 
	  JOIN setcore.byte_count bc ON (bc.blob = srv.blob)
  WHERE
  	srv.blob = '$BLOB'
END
}

count_tables()
{
	$PSQL --expanded <<END 						|| \
		die "count_tables: psql failed: exit status=$?"
\\pset tuples_only off

SELECT
  (SELECT
  	count(*)
    FROM
    	jsonorg.checker_255
  ) AS checker_255,
  (SELECT
  	count(*)
    FROM
    	jsonorg.jsonb_255
  ) AS jsonb_255,
  (SELECT
  	count(*)
    FROM
    	jsonorg.service
  ) AS service,
  (SELECT
  	count(*)
    FROM
    	jsonorg.jsonb_255_key_word_set
  ) AS jsonb_255_key_word_set
END
	
}

ls_object()
{
	$PSQL --expanded <<END || die "ls_object: psql failed: exit status=$?"
SELECT
	c.relname AS "Object",
	CASE
	  WHEN c.relkind = 'r'
	  THEN 'Relation'
	  WHEN c.relkind = 'v'
	  THEN 'View'
	  WHEN c.relkind = 'm'
	  THEN 'Materialized View'
	  ELSE
	  	'Unknown: ' || c.relkind
	END AS "Kind",
	CASE
	  WHEN pg_total_relation_size(c.oid) > 0
	  THEN
		'About '						||
		pg_size_pretty(pg_total_relation_size(c.oid))		||
		'ytes'
	  WHEN c.relkind = 'v'
	  THEN
	  	'Unknown'
	  ELSE
	  	'Unknown'
	END AS "Size",
	CASE
	  WHEN c.reltuples >= 0
	  THEN
		'About ' || c.reltuples || ' rows'
	  ELSE
	  	'Unknown'
	END AS "Count"
    FROM
      	pg_catalog.pg_class c
	  JOIN pg_catalog.pg_namespace n ON (
	  	n.oid = c.relnamespace
	  )
    WHERE
	n.nspname = 'jsonorg'
	AND
	c.relkind NOT IN ('i')
    GROUP BY
    	c.relname,
	c.relkind,
	c.oid
    ORDER BY
    	c.relkind = 'r' DESC,
	c.relkind = 'm' DESC,
	c.relkind = 'v' DESC
END
}

if [ $# = 0 ];  then
	help
	exit 0
fi

ACTION="$1";  shift

case "$ACTION" in
help)
	help
	;;
ls)
	[ $# = 0 ] && ls_recent

	ACTION="$1"

	case "$ACTION" in
	object)
		ls_object
		;;
	recent)
		ls_recent
		;;
	service)
		ls_service
		;;
	[a-z]*:*)
		ls_blob "$ACTION"
		;;
	*)
		die "ls: unknown action: $ACTION"
		;;
	esac
	;;

count)
	[ $# = 0 ] || die "count: unknown action: $1"
	count_tables
	;;

refresh)
	refresh
	;;
*)
	die "unknown action: $ACTION"
	;;
esac
exit 0
