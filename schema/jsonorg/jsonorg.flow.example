#
#  Synopsis:
#	Populate the PostgreSQL schema defined in schema.sql
#  See:
#	schema.sql
#  Note:
#	Investigate if the first two characters of a json document are
#	always ascii:
#
#		http://www.ietf.org/rfc/rfc4627.txt
#
#	Is the same true for the last two chars?
#

boot
{
	brr_capacity = 256;
	flow_worker_count = 16;
	os_exec_worker_count = 12;
	os_exec_capacity = 12;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

sync map first_seen_blob[string]bool;

command first_seen
{
	path = "true";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"fallback_application_name=jsonorg.flow sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 8;
}

tail brr
{
	path = "spool/prefixio.brr";
}

call first_seen(brr.udig)
  when
  	first_seen_blob.LoadOrStore(brr.udig, true).loaded == false
;

#
#  Synopsis:
#	Is the blob in the service table
#
sql query in_service_table row
{

	result row is (
		answer bool
	);

	statement = `

	SELECT EXISTS (
	  SELECT
		blob
	    FROM
		setcore.service
	    WHERE
		blob = $1::udig
	);

	`;
}

sql query is_in_checker_255_table row
{
	statement = `

	 SELECT
	  EXISTS (
	    SELECT
	    	blob
	      FROM
	      	jsonorg.checker_255
	      WHERE
	      	blob = $1::udig
	  ),
	  (SELECT
	    	is_json
	    FROM
	      	jsonorg.checker_255
	      WHERE
	      	blob = $1::udig
	  )
	;`;
	result row is (
		exists bool,
		is_json bool
	);
}

command brr_has_size
{
	path = "true";
}

call brr_has_size()
  when
  first_seen.exit_status == 0
  and (
  (
	brr.verb == "get"
	and
	brr.chat_history == "ok"
  )
  or
  (
	brr.verb == "put"
	and
	brr.chat_history == "ok,ok"
  )
  or
  (
	brr.verb == "give"
	and
	brr.chat_history == "ok,ok,ok"
  ))
;

query in_service_table(brr.udig)
  when
  	first_seen.exit_status == 0
;

query is_in_checker_255_table(brr.udig)
  when
  	in_service_table.answer == true
;

command get_JSON_checker
{
	path = "sbin/get-JSON_checker";
	exit_status is OK when in {
		0,	#  is valid json
		1,	#  is not valid json
		2,	#  blob does not exist
		3,	#  wrong number of command line arguments
		4	#  blobio | JSON_checker failed
	};
}

call get_JSON_checker (brr.udig)
  when
  	is_in_checker_255_table.exists == false
;

#
#  Merge the tuple into the table jsonorg.checker_255
#
sql query merge_checker_255 row
{
	statement = `

	INSERT into jsonorg.checker_255 (
		blob,
		is_json
	  ) SELECT
		$1::udig,
		case $2 
	  		when '0' then true
	  		when '1' then false
		end
  	  ON CONFLICT
  		do nothing
	  RETURNING
	  	is_json
	;

	`;

	result row is (
		is_json bool
	);
}

query merge_checker_255 (brr.udig, get_JSON_checker.exit_status)
  when
  	get_JSON_checker.exit_status == 0
	or
  	get_JSON_checker.exit_status == 1
;

sql query in_jsonb_255_table row
{
	statement = `

	SELECT EXISTS (
	  SELECT
	  	blob
	    FROM
	    	jsonorg.jsonb_255
	    WHERE
	    	blob = $1::udig
	);`;

	result row is (
		exists bool
	);
}

query in_jsonb_255_table (brr.udig)
  when
  	is_in_checker_255_table.is_json == true
	or
	merge_checker_255.is_json == true
	or

	#
	#  insert on conflict do nothing.
	#
	(
		merge_checker_255.sqlstate == "02000"
		and
		get_JSON_checker.exit_status == 0
	)
;

command merge_jsonb_255
{
	path = "sbin/merge-jsonb_255";
	exit_status is OK when in {
		0,	#  merged or already exists
		1	#  blob does not exist
	};
}

call merge_jsonb_255 (brr.udig, brr.blob_size)
  when
  	in_jsonb_255_table.exists == false
	and
	brr_has_size.exit_status == 0
;

command append_jsonio_brr
{
       path = "append-brr";
       argv = (
               "../jsonio/spool/jsonorg.brr"
       );
}

call append_jsonio_brr(
       brr.start_time,
       "fs~schema=jsonio",
       brr.verb,
       brr.udig,
       brr.chat_history,
       brr.blob_size,
       brr.wall_duration
) when
	merge_jsonb_255.exit_status == 0
	or
	in_jsonb_255_table.exists == true
;
