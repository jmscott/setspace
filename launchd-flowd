#!/bin/bash
#
#  Synopsis:
#	Synchonously start flowd server for a schema from Mac OS/X launchd.
#  Usage:
#	launchd-flowd path/to/<schema>.flow
#
#	<key>ProgramArguments</key>
#	  <array>
#	    <string>/usr/local/setspace/sbin/launchd-flowd</string>
#	    <string>etc/fffile.flow</string>
#	  </array>
#	<key>WorkingDirectory</key>
#	<string>/usr/local/setspace/schema/fffile</string>
#  Note:
#	Think about profile in $SETSPACE_ROOT/schema/etc, since most flowds
#	will search $SETSPACE_ROOT/schema/<schema>/{bin,sbin}.
#
#	On MaxOS need to move to /usr/local/setspace/bin, to get around
#	new SIP security model.  dir sbin/ is only accessable by setspace user.
#	where are the docs for this SIP palaver?
#
#	Do we need to call zap-proc run/flowd.pid?
#

log()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $@"
}

die()
{
	echo "ERROR: $@" >&2
	exit 2
}

leave()
{
	log 'good bye, cruel world'
}

test $# = 1 || die 'wrong number of arguments'
FLOW=$1

log 'hello, world'
trap leave EXIT

test -n "$SETSPACE_ROOT" || die "environment var not defined: SETSPACE_ROOT"

log "SETSPACE_ROOT=$SETSPACE_ROOT"
log "flow file: $FLOW"

#
#  source in $SETSPACE_ROOT/etc/profile
#

PROFILE=$SETSPACE_ROOT/etc/profile
test -r $PROFILE || die "can not read setspace profile: $PROFILE"
. $PROFILE || die "sourcing setspace profile failed: $PROFILE"

#
#  source in schema specific profile
#
PROFILE=etc/profile
test -r etc/profile || die "can not read schema profile: $PROFILE"
. $PROFILE || die "sourcing schema profile failed: $PROFILE"

log 'dumping process environment ...'
env | while read E;  do
	log "$E"
done

if [ -x sbin/launchd-flow-init ];  then
	log 'sbin/launchd-flow-init exists, so initializing ...'
	sbin/launchd-flow-init						||
		die "launchd-flow-init failed: exit status=$?"
fi

log "execing flowd server $FLOW ..."
exec flowd server $FLOW
