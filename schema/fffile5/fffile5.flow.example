#
#  Synopsis:
#	Populate PostgreSQL schema "fffile5" for the Fine Free File command.
#  See:
#	schema.sql
#  Note:
#	- Is shcmea "public" needed?
#
#	- User mime_type "message/rfc822" to route to schema p5mail!
#
#	- How to refresh materialied views from flow instead of cron?
#	  Timestamps of refresh are not stored in pg
#
#	- How do we know the output of "file" will always be UTF8?
#

boot
{
	brr_capacity = 32;
	flow_worker_count = 8;
	os_exec_worker_count = 8;
	os_exec_capacity = 8;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

sync map first_seen_blob[string]bool;

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"search_path=fffile5,setspace,public fallback_application_name=fffile5.flow sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 8;
}

tail brr
{
	path = "spool/setcore.brr";
}

command first_seen
{
	path = "true";
}

call first_seen(brr.udig)
  when
  	first_seen_blob.LoadOrStore(brr.udig, true).loaded == false
;

sql query in_service_table row
{
	statement = `

	SELECT
	  EXISTS (
	    SELECT
	  	true
	      FROM
	    	fffile5.service
	      WHERE
	    	blob = $1::udig
	  ),
	  EXISTS (
	    SELECT
	    	true
	      FROM
	      	setcore.service
	      WHERE
	      	blob = $1::udig
	  );
	`;

	result row is (
		in_fffile5 bool,
		in_setcore bool
	);
}

query in_service_table(brr.udig)
  when
  	first_seen.exit_status == 0
;

sql query in_blob_table row
{
	statement = `
	SELECT
	  EXISTS (
	    SELECT
	    	blob
	      FROM
	      	fffile5.blob
	      WHERE
	      	blob = $1::udig
	  )
	`;
	result row is (
		answer bool
	);
}
query in_blob_table(brr.udig)
  when
  	in_service_table.in_fffile5 == false
	and
	in_service_table.in_setcore == true
;

sql exec upsert_blob
{
	statement = `
	INSERT INTO fffile5.blob(
		blob
	  ) VALUES(
	  	$1::udig
	  ) ON CONFLICT
	  	DO NOTHING
	`;
}

query upsert_blob(brr.udig)
  when
  	in_blob_table.answer == false
;

command blob_ready
{
	path = "true";
}

call blob_ready(brr.udig)
  when
  	in_blob_table.answer == true
	or
	upsert_blob.sqlstate == "00000"
;

#
#  Table:
#	file
#

sql query file_state row
{
	statement = `
	SELECT
	  EXISTS (
	    SELECT
		true
	      FROM
		fffile5.file
	      WHERE
		blob = $1::udig
	  ),
	  EXISTS (
	    SELECT
		true
	      FROM
		setops.flowd_call_fault
	      WHERE
		schema_name = 'fffile5'
		AND
		command_name = 'upsert_file'
		AND
		blob = $1::udig
	  )
	`; 
	result row is (
		in_table bool,
		in_fault bool
	);
}

query file_state(brr.udig)
  when
  	blob_ready.exit_status == 0
;

command upsert_file
{
	path = "sbin/upsert-file";
	exit_status is OK when in {0, 1};
}

call upsert_file(brr.udig)
  when
  	file_state.in_table == false
	and
	file_state.in_fault == false
;

sql exec upsert_file_fault
{
	statement = `
	INSERT INTO setops.flowd_call_fault(
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		signal,
		fault_time
	  ) VALUES (
	  	'fffile5',
		'upsert_file',
		$1,
		'ERR',
		$2,
		0,
		now()
	  ) ON CONFLICT
	  	DO NOTHING
	;`;
}

query upsert_file_fault(brr.udig, upsert_file.exit_status)
  when
  	upsert_file.exit_status != 0
	and
  	upsert_file.exit_status != 1
;

#
#  Table:
#	file_mime_type
#

sql query file_mime_type_state row
{
	statement = `
	SELECT
	  EXISTS (
	    SELECT
		true
	      FROM
		fffile5.file_mime_type
	      WHERE
		blob = $1::udig
	  ),
	  EXISTS (
	    SELECT
		true
	      FROM
		setops.flowd_call_fault
	      WHERE
		schema_name = 'fffile5'
		AND
		command_name = 'upsert_file_mime_type'
		AND
		blob = $1::udig
	  )
	`; 
	result row is (
		in_table bool,
		in_fault bool
	);
}

query file_mime_type_state(brr.udig)
  when
  	blob_ready.exit_status == 0
;

command upsert_file_mime_type
{
	path = "sbin/upsert-file_mime_type";
	exit_status is OK when in {0, 1};
}

call upsert_file_mime_type(brr.udig)
  when
  	file_mime_type_state.in_table == false
	and
	file_mime_type_state.in_fault == false
;

sql exec upsert_file_mime_type_fault
{
	statement = `
	INSERT INTO setops.flowd_call_fault(
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		signal,
		fault_time
	  ) VALUES (
	  	'fffile5',
		'upsert_file_mime_type',
		$1,
		'ERR',
		$2,
		0,
		now()
	  ) ON CONFLICT
	  	DO NOTHING
	;`;
}

query upsert_file_mime_type_fault(
	brr.udig,
	upsert_file_mime_type.exit_status
  ) when
  	upsert_file_mime_type.exit_status != 0
	and
  	upsert_file_mime_type.exit_status != 1
;
#
#  Table:
#	file_mime_encoding
#

sql query file_mime_encoding_state row
{
	statement = `
	SELECT
	  EXISTS (
	    SELECT
		true
	      FROM
		fffile5.file_mime_encoding
	      WHERE
		blob = $1::udig
	  ),
	  EXISTS (
	    SELECT
		true
	      FROM
		setops.flowd_call_fault
	      WHERE
		schema_name = 'fffile5'
		AND
		command_name = 'upsert_file_mime_encoding'
		AND
		blob = $1::udig
	  )
	`; 
	result row is (
		in_table bool,
		in_fault bool
	);
}

query file_mime_encoding_state(brr.udig)
  when
  	blob_ready.exit_status == 0
;

command upsert_file_mime_encoding
{
	path = "sbin/upsert-file_mime_encoding";
	exit_status is OK when in {0, 1};
}

call upsert_file_mime_encoding(brr.udig)
  when
  	file_mime_encoding_state.in_table == false
	and
	file_mime_encoding_state.in_fault == false
;

sql exec upsert_file_mime_encoding_fault
{
	statement = `
	INSERT INTO setops.flowd_call_fault(
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		signal,
		fault_time
	  ) VALUES (
	  	'fffile5',
		'upsert_file_mime_encoding',
		$1,
		'ERR',
		$2,
		0,
		now()
	  ) ON CONFLICT
	  	DO NOTHING
	;`;
}

query upsert_file_mime_encoding_fault(
	brr.udig,
	upsert_file_mime_encoding.exit_status
  ) when
  	upsert_file_mime_encoding.exit_status != 0
	and
  	upsert_file_mime_encoding.exit_status != 1
;
