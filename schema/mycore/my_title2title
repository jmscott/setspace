#!/usr/bin/env perl
#
#  Synopsis:
#	Convert my_title rows into json requests for merging mycore.title.
#  Usage:
#	psql -f select-my_title.sql | head -1 | my_title2title
#	my_title2title <<END
#	sha:47754bff255677801b9f7d46586af5b947a63a08\tHamlet\t1554311194
#	END
#  See Also:
#	select-my_title.sql
#  Note:
#	Deprecated since move to mycore.
#

use utf8;

#  Code lifted from JSON-Tiny
my %ESCAPE = (
	'"'     => '"',
	'\\'    => '\\',
	'b'     => "\x08",
	'f'     => "\x0c",
	'n'     => "\x0a",
	'r'     => "\x0d",
	't'     => "\x09",
	'u2028' => "\x{2028}",		#  unicode line-separator
	'u2029' => "\x{2029}"		#  unicode paragraph-separator
);

my %REVERSE = map { $ESCAPE{$_} => "\\$_" } keys %ESCAPE;

for(0x00 .. 0x1f) {
	my $packed = pack 'C', $_;
	$REVERSE{$packed} = sprintf '\u%.4X', $_
			unless defined $REVERSE{$packed};
}

sub utf82json_string
{
	my $str = shift;
	$str =~ s!([\x00-\x1f\x{2028}\x{2029}\\"])!$REVERSE{$1}!gs;
	return "\"$str\"";
}

die 'wrong number of arguments' unless @ARGV == 0;

while (<STDIN>) {
	chomp;
	my ($blob, $title) = split("\t");

	die "field #1core blob: not a udig: $blob"
		unless $blob =~m/^[a-z][a-z0-9]{0,7}:[[:graph:]]{32,128}$/;
	die "field #2: title: greater than 255 chars: $title"
					unless length($title) < 256
	;

	$core_blob = utf82json_string($blob);

	my $new_title = $title;

	#  control characters replaced with space
	$new_title =~ s/[[:cntrl:]]+/ /g;
	
	#  strip leading an trailing space
	$new_title =~ s/^[[:space:]]+|[[:space:]]+$//g;

	#  compress white space
	$new_title =~ s/[[:space:]]{2,}//g;

	$title = utf82json_string($title);
	$new_title = utf82json_string($new_title);
	my $request_unix_epoch = time();
	print <<END;
{
	"mycore.schema.setspace.com": {
		"title": {
			"blob": $core_blob,
			"title": $new_title
		}
	},
	"note": "batch loaded by jmscott with script sbin/my_title2title",
	"request-unix-epoch": $request_unix_epoch,
	"request_title": $title,
}
END
}
