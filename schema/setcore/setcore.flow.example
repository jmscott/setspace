#
#  Synopsis:
#	Flow blobs into "setcore" schema defined in PostgreSQL database
#  Usage:
#  	flowd server setcore.conf
#  See:
#  	schema/setcore/schema.sql
#

boot
{
	brr_capacity = 24;
	flow_worker_count = 16;
	os_exec_worker_count = 8;
	os_exec_capacity = 4;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

tail bio4d
{
	path = "spool/bio4d.brr";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"fallback_application_name=flowd.setcore sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 4;
}

command brr_ok
{
	path = "true";
}

call brr_ok()
  when
  	bio4d.chat_history == "ok"
	or
	bio4d.chat_history == "ok,ok"
	or
	bio4d.chat_history == "ok,ok,ok"
;

sql exec upsert_eldest_ok
{
	statement = `
INSERT INTO setcore.chat_history_ok (
	blob,
	start_time
) VALUES (
	$1,
	$2
) ON CONFLICT (blob) DO UPDATE
  SET
  	start_time = excluded.start_time
  WHERE
	chat_history_ok.start_time > excluded.start_time
;
	`;
}

sql query eldest_ok_upsertable row
{
	result row is (
		exists	bool
	);

	statement = `
SELECT EXISTS (			--  new chat history seen
  SELECT
  	null
    FROM
    	setcore.chat_history_ok
    WHERE
    	blob = $1
	AND
	start_time > $2
) OR NOT EXISTS (		--  first time chat history exists
  SELECT
  	null
    FROM
    	setcore.chat_history_ok
    WHERE
    	blob = $1
)`;
}

query eldest_ok_upsertable(bio4d.udig, bio4d.start_time)
  when
	#  only interested in blobs which have existed

  	bio4d.chat_history == "ok"
	or
  	bio4d.chat_history == "ok,ok"
	or
  	bio4d.chat_history == "ok,ok,ok"
;

query upsert_eldest_ok(bio4d.udig, bio4d.start_time)
  when
  	eldest_ok_upsertable.exists == true
;

command eat_blob
{
	path = "blobio";
	argv = (
		"eat",
		"--service",
		"fs:${BLOBIO_ROOT}",
		"--udig"
	);
	exit_status is OK when in {0, 1};
}

sql query in_chat_history_ok row
{
	result row is (
		answer	bool
	);
	statement = `
SELECT EXISTS (
  SELECT
	null
    FROM
    	setcore.chat_history_ok
    WHERE
    	blob = $1
);`;
}

query in_chat_history_ok(bio4d.udig);

sync map in_flight[string]bool;

call eat_blob(bio4d.udig)
  when
	in_flight.LoadOrStore(bio4d.udig, true).loaded == false

	#  did we just insert into chat_history_o
	and
	(
		
		eldest_ok_upsertable.exists == true	#  just upserted
		or
		in_chat_history_ok.answer == true	#  already in table
	)
;

sql query in_service row
{
	result row is (
		answer bool
	);
	statement = `
SELECT EXISTS (
  SELECT
  	null
    FROM
    	setcore.service
    WHERE
    	blob = $1
);`;
}

query in_service(bio4d.udig)
  when
  	eat_blob.exit_status == 0
;

#  insert into table byte_bitmap
sql query in_byte_bitmap row
{
	result row is (
		answer bool
	);
	statement = `
SELECT EXISTS (
  SELECT
  	null
    FROM
    	setcore.byte_bitmap
    WHERE
    	blob = $1
);`;
}

command upsert_byte_bitmap
{
        path = "sbin/upsert-byte_bitmap";
        exit_status is OK when in {0, 1};
}

query in_byte_bitmap(bio4d.udig)
  when
  	eat_blob.exit_status == 0
;

call upsert_byte_bitmap(bio4d.udig)
  when
  	in_byte_bitmap.answer == false
;

#  insert into table byte_count

sql query in_byte_count row
{
	result row is (
		answer bool
	);
	statement = `
SELECT EXISTS (
  SELECT
  	null
    FROM
    	setcore.byte_count
    WHERE
    	blob = $1
);`;
}

command upsert_byte_count
{
        path = "sbin/upsert-byte_count";
        exit_status is OK when in {0, 1};
}

query in_byte_count(bio4d.udig)
  when
  	eat_blob.exit_status == 0
;

call upsert_byte_count(bio4d.udig)
  when
  	in_byte_count.answer == false
;

#  insert into table byte_prefix_32

sql query in_byte_prefix_32 row
{
	result row is (
		answer bool
	);
	statement = `
SELECT EXISTS (
  SELECT
  	null
    FROM
    	setcore.byte_prefix_32
    WHERE
    	blob = $1
);`;
}

command upsert_byte_prefix_32
{
        path = "sbin/upsert-byte_prefix_32";
        exit_status is OK when in {0, 1};
}

query in_byte_prefix_32(bio4d.udig)
  when
  	eat_blob.exit_status == 0
;

call upsert_byte_prefix_32(bio4d.udig)
  when
  	in_byte_prefix_32.answer == false
;

#  insert into table byte_suffix_32

sql query in_byte_suffix_32 row
{
	result row is (
		answer bool
	);
	statement = `
SELECT EXISTS (
  SELECT
  	null
    FROM
    	setcore.byte_suffix_32
    WHERE
    	blob = $1
);`;
}

command upsert_byte_suffix_32
{
        path = "sbin/upsert-byte_suffix_32";
        exit_status is OK when in {0, 1};
}

query in_byte_suffix_32(bio4d.udig)
  when
  	eat_blob.exit_status == 0
;

call upsert_byte_suffix_32(bio4d.udig)
  when
  	in_byte_suffix_32.answer == false
;
