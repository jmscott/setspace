/*
 *  Synopsis:
 *  	Merge the output of putPDDocumentInformation.class into the database
 *  Usage:
 *	upsert-stdin-pddocument_information 
 *  Arguments:
 *  	1	udig of the blob that file command analyzed
 *  	2	number of bytes of extracted pdfinfo on stdin
 *  Exit Status:
 *  	0	ok, tuple was upsertd
 *	1	unexpected error
 *  See:
 *	putPDDocumentInformation.java
 *  Note:
 *	Verify scan() is properly handling utf8 and that java generates
 *	utf8.
 *
 *	The code is sensitive to field order in standard input.
 *
 *		Title: <title>
 *		Author: <author>
 *		Subject: <subject>
 *		Keywords: <keywords>
 *		Creator: <creator>
 *		Producer: <producer>
 *		Creation Date String: <creation date>
 *		Modification Date String: <modification date>
 *		Trapped: <trapped>
 *
 *	Any deviation from this order will causes unpredicatable
 *	behavior by this script.  Fields can be missing but not
 *	out of order.
 *
 *	Is VARCHAR truly allocated in characters (not bytes)?
 */
#include <stdlib.h>

#include "jmscott/libjmscott.h"

char *jmscott_progname = "upsert-stdin-pddocument_information";

#define EXIT_OK		0
#define EXIT_BAD	1

//  ignore these sql errors

//  ignore these sql errors

static struct jmscott_ecpg_state_fault no_warn[] =
{
        {"02000", 0},                //  no data for conflict on upsert/insert
        {(char *)0, 0}
};

static char *usage =
	"upsert-stdin-pddocument_information blob <stdin-byte-count>"
;

static char *input = NULL;
static char *input_limit = NULL;

static void
die(char *msg)
{
	jmscott_die(EXIT_BAD, msg);
}

static void
die2(char *msg1, char *msg2)
{
	jmscott_die2(EXIT_BAD, msg1, msg2);
}

/*
 *  scan() expects the output of putPDDocumentInformation in this order.
 *
 *	Title: <title>
 *	Author: <author>
 *	Subject: <subject>
 *	Keywords: <keywords>
 *	Creator: <creator>
 *	Producer: <producer>
 *	Creation Date String: <creation date>
 *	Modification Date String: <modification date>
 *	Trapped: <trapped>
 */
static void
scan(
	char *field_name,
	char arr[32768],
	int *len,
	int *is_null
) {
	static char peek_field_name[18];
	static char peek_arr[32768];
	static int peek_len = -1;
	char *p, *q;

	//  has a field been scanned but not consumed?

	if (peek_len == -1) {
		if (input >= input_limit)
			return;
		p = input;
		peek_len = 0;

		// scan field name up to colon

		q = peek_field_name;
		while (*p != ':')
			*q++ = *p++;
		*q = 0;

		//  skip colon and space

		p += 2;

		// scan field value up to new-line  

		q = peek_arr;
		while (*p != '\n')
			*q++ = *p++;
		*q = 0;

		peek_len = q - peek_arr;
		input = ++p;
	}

	//  is this the field we are looking for?

	if (strcmp(field_name, peek_field_name) != 0)
		return;

	strcpy(arr, peek_arr);
	*len = peek_len;
	*is_null = 0;

	peek_len = -1;
}

int
main(int argc, char **argv)
{
	char *sz;
	size_t input_size = 0;

EXEC SQL BEGIN DECLARE SECTION;
	char *blob;

	VARCHAR title[32768];
	int title_ind = -1;

	VARCHAR author[32768];
	int author_ind = -1;

	VARCHAR creation_date[32768];
	int creation_date_ind = -1;

	VARCHAR creator[32768];
	int creator_ind = -1;

	VARCHAR keywords[32768];
	int keywords_ind = -1;

	VARCHAR modification_date[32768];
	int modification_date_ind = -1;

	VARCHAR producer[32768];
	int producer_ind = -1;

	VARCHAR subject[32768];
	int subject_ind = -1;

	VARCHAR trapped[32768];
	int trapped_ind = -1;

EXEC SQL END DECLARE SECTION;

	argc--;
	if (argc != 2)
		jmscott_die_argc(EXIT_BAD, argc, 2, usage);

	close(1);

	//  parse the pdf udig as argv[1]

	blob = argv[1];
	char *err = jmscott_frisk_udig(blob);
	if (err)
		die2("not a udig", blob);

	//  the output of java pddocument_information is slurped and parsed
	//  into single buffer.

	sz = argv[2];
	err = jmscott_a2size_t(sz, &input_size);
	if (err)
		die2("can not scan input size", sz);

	input = malloc(input_size + 1);
	if (input == NULL)
		die2("malloc(input blob) failed", sz);
	input[input_size] = 0;
	input_limit = input + input_size;

	errno = 0;
	int status = jmscott_read_exact(0, input, input_size);
	if (status == -1)
		die2("read(stdin) failed", strerror(errno));
	if (status == -2)
		die2("read(stdin): unexpected end-of-file <", sz);
	if (status < 0) {
		if (errno > 0)
			die2("unexpected read(stdin) < 0", strerror(errno)); 
		else
			die("unexpected read(stdin) < 0: no errno");
	}

	//  order of header matters. see Note: in preamble comment at start of
	//  file.

	scan("Title", title.arr, &title.len, &title_ind);
	scan("Author", author.arr, &author.len, &author_ind);
	scan("Subject", subject.arr, &subject.len, &subject_ind);
	scan("Keywords", keywords.arr, &keywords.len, &keywords_ind);
	scan("Creator", creator.arr, &creator.len, &creator_ind);
	scan("Producer", producer.arr, &producer.len, &producer_ind);
	scan("Creation Date String", creation_date.arr, &creation_date.len,
					&creation_date_ind);
	scan("Modification Date String", modification_date.arr,
				&modification_date.len, &modification_date_ind);
	scan("Trapped", trapped.arr, &trapped.len, &trapped_ind);

	EXEC SQL WHENEVER SQLERROR CALL jmscott_ecpg_error(
		(struct jmscott_ecpg_state_fault *)0);
	EXEC SQL WHENEVER SQLWARNING CALL jmscott_ecpg_warning(
		no_warn
	);
	EXEC SQL CONNECT TO default;

	EXEC SQL BEGIN TRANSACTION;

	/*
	 *  Merge blob into fffile.file_type table.
	 */
	EXEC SQL INSERT INTO pdfbox.pddocument_information(
		blob,
		title,
		author,
		creation_date_string,
		creator,
		keywords,
		modification_date_string,
		producer,
		subject,
		trapped
	  ) VALUES (
		:blob,
		:title INDICATOR :title_ind,
		:author INDICATOR :author_ind,
		:creation_date INDICATOR :creation_date_ind,
		:creator INDICATOR :creator_ind,
		:keywords INDICATOR :keywords_ind,
		:modification_date INDICATOR :modification_date_ind,
		:producer INDICATOR :producer_ind,
		:subject INDICATOR :subject_ind,
		:trapped INDICATOR :trapped_ind
	  )
  	  ON CONFLICT
  		DO NOTHING
	;
	EXEC SQL END TRANSACTION;

	_exit(EXIT_OK);
}
