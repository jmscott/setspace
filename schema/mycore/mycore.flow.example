#
#  Synopsis:
#	Merge blobs into tables in schema mycore.
#  Usage:
#  	flowd server etc/mycore.flow
#  See:
#  	mycore/lib/schema.sql
#  Note:
#	Requests are independent, so a delete before a merge may be out of order
#

boot
{
	brr_capacity = 256;
	flow_worker_count = 24;

	os_exec_worker_count = 8;
	os_exec_capacity = 4;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

sync map sync_brr[string]bool;

command first_flight
{
	path = "true";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"fallback_application_name=mycore.flow sslmode=disable";
	max_idle_conns = 0;

	#  mydash is interactive, so lots of database connections
	max_open_conns = 16;
}

tail brr
{
	path = "spool/jsonio.brr";
}

#
#  Has the request been seen before?
#

sql query is_merge_request_title_json row
{
	statement = `
SELECT
  EXISTS (
    SELECT
  	blob
      FROM
	mycore.merge_request_title_json
      WHERE
    	blob = $1
  ),
  EXISTS (
    SELECT
  	true
      FROM
    	jsonorg.jsonb_255
      WHERE
        blob = $1
        AND
        doc->>'setspace_schema' = 'mycore.schema.setspace.com'
	AND
	doc ? 'request_unix_epoch'
	AND
	(doc -> 'merge' -> 'title') IS NOT NULL
  )
`;
	result row is (
		request_exists bool,
		is_title_request bool
	);
}

call first_flight()
  when
  	sync_brr.LoadOrStore(brr.udig, true).loaded == false
;

query is_merge_request_title_json(brr.udig)
  when
  	first_flight.exit_status == 0
;

sql exec merge_request_title_json
{
	statement = `
INSERT INTO mycore.merge_request_title_json(
	blob,
	request_time
) SELECT
	$1 AS blob,
	to_timestamp((doc ->> 'request_unix_epoch')::double precision)
	  AS request_time
    FROM
  	jsonorg.jsonb_255
    WHERE
  	blob = $1
    ON CONFLICT
  	DO NOTHING
	`;
}

query merge_request_title_json(brr.udig)
  when
  	is_merge_request_title_json.is_title_request == true
	and
	is_merge_request_title_json.request_exists == false
;
