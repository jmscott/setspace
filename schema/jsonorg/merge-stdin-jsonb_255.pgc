/*
 *  Synopsis:
 *  	Merge a json blob read on standard input into table jsonorg.jsonb_255.
 *  Usage:
 *	merge-stdin-jsonb_255 
 *  Arguments:
 *  	1	udig of the blob
 *  	2	number of bytes to read on the standard input
 *  Exit Status:
 *  	0	ok, tuple was merged
 *  	1	Wrong number of arguments
 *  	2	Incorrect blob size
 *  	3	malloc() of utf8 buffer failed
 *	4	read() of standard input failed
 *	5	syntax error on udig
 *	6	sql error
 *	7	sql warning
 *	8	blob too small
 *	9	blob too large
 *  Blame:
 *  	jmscott@setspace.com
 *  	setspace@gmail.com
 */

static char progname[] = "merge-stdin-jsonb_255";

#define EXIT_OK		0
#define EXIT_BAD_ARGC	1
#define EXIT_BAD_SIZE	2
#define EXIT_BAD_MALLOC 3
#define EXIT_BAD_READ	4
#define EXIT_BAD_UDIG	5
#define EXIT_SQLERROR	6
#define EXIT_SQLWARN	7
#define EXIT_BLOB_SMALL 8
#define EXIT_BLOB_BIG	9

#define COMMON_NEED_READ_BLOB
#include "../../common.c"

#define COMMON_ECPG_NEED_SQL_ERROR
#define COMMON_ECPG_NEED_SQL_WARNING
#include "../../common-ecpg.c"

#include <stdlib.h>

static struct _ecpg_sql_state_fault no_warn[] =
{
	{ "02000", -1},		//  no data for conflict on upsert/insert
	{(char *)0, 0}
};

int
main(int argc, char **argv)
{
	int size;
	size_t len;
	char *sz;

EXEC SQL BEGIN DECLARE SECTION;
	char *blob;
	char *doc;
EXEC SQL END DECLARE SECTION;

	if (argc != 3)
		die(EXIT_BAD_ARGC, "wrong number of arguments");
	close(1);

	//  parse the udig as argv[1]
	blob = argv[1];
	len = strlen(blob);
	if (len < 34 || len > 255 || strchr(blob, ':') == NULL)
		die2(EXIT_BAD_UDIG, "syntax error in json udig", blob);

	//  parse the blob size as argv[2]
	sz = argv[2];
	len = strlen(sz);
	if (len < 1 || len > 19)
		die2(EXIT_BAD_SIZE, "blob size not > 0 and < 20 chars", sz);

	//  need to validate that all chars are decimal digits
	size = atoi(sz);
	if (size <= 0)
		die2(EXIT_BAD_SIZE, "atoi(blob size) <= 0", sz);

	//  allocate the json buffer plus null byte
	doc = malloc(size + 1);
	if (doc == NULL)
		die2(EXIT_BAD_MALLOC, "malloc() failed", sz);
	doc[size] = 0;

	_read_blob(0, doc, size);

	EXEC SQL WHENEVER SQLERROR CALL _ecpg_sql_error(
		(struct _ecpg_sql_state_fault *)0
	);
	EXEC SQL WHENEVER SQLWARNING CALL _ecpg_sql_warning(no_warn);
	EXEC SQL CONNECT TO default;

	/*
	 *  Merge blob into jsonorg.jsonb_255 table.
	 */
	EXEC SQL BEGIN TRANSACTION;
	EXEC SQL
	  INSERT INTO jsonorg.jsonb_255(
		blob,
		doc
	  ) VALUES (
		:blob::udig,
		:doc::jsonb
	  )
  	  ON CONFLICT
  		DO NOTHING
	;
	EXEC SQL END TRANSACTION;

	_exit(EXIT_OK);
}
