/*
 *  Synopsis:
 *  	Merge pages in directory into extract_pages_utf8, page_{text,tsv}_utf8.
 *  Usage:
 *	merge-all-extract_pages_utf8 <udig> <tsv_config>
 *  Arguments:
 *  	1	udig of the pdf blob
 *	2	tsv vector configuration
 *  Exit Status:
 *  	0	ok, all pages were merged
 *  	1	program invocation error
 *  	2	malloc() failed
 *	3	file system i/o error
 *	4	sql error
 *	5	sql warning
 */

static char progname[] = "merge-stdin-page_text_utf8";

#define EXIT_OK		0
#define EXIT_BAD_INVO	1
#define EXIT_BAD_MALLOC 2

//  map all i/o errors into same error code
#define EXIT_BAD_OPEN	3
#define EXIT_BAD_READ	3
#define EXIT_BLOB_SMALL	3
#define EXIT_BLOB_BIG	3
#define EXIT_BAD_STAT	3
#define EXIT_BAD_CLOSE	3

#define EXIT_SQLERROR	4
#define EXIT_SQLWARN	5

#define COMMON_NEED_STAT 
#define COMMON_NEED_READ_BLOB
#define COMMON_NEED_OPEN
#define COMMON_NEED_CLOSE
#include "../../common.c"

#define COMMON_ECPG_NEED_SQL_WARNING
#define COMMON_ECPG_NEED_SQL_ERROR
#include "../../common-ecpg.c"

//  ignore these sql warnings

static struct _ecpg_sql_state_fault no_warns[] =
{
	{"02000", -1},	//  no data found due to upsert conflict 
	{(char *)0, -1}
};

int
main(int argc, char **argv)
{
	size_t len;

EXEC SQL BEGIN DECLARE SECTION;
	char *pdf_blob;
	char *txt;
	int txt_size;
	char *tsv_conf;
	int page_number;
EXEC SQL END DECLARE SECTION;

	if (argc != 4)
		die(EXIT_BAD_INVO, "wrong number of arguments");

	close(1);

	//  parse the pdf udig from argv[1]

	pdf_blob = argv[1];
	len = strlen(pdf_blob);
	if (len < 34 || len > 137 || strchr(pdf_blob, ':') == NULL)
		die2(EXIT_BAD_INVO, "syntax error in pdf udig", pdf_blob);

	// the text search configuration
	tsv_conf = argv[2];
	if (!tsv_conf[0])
		die(EXIT_BAD_INVO, "zero length tsv config");

	EXEC SQL WHENEVER SQLERROR CALL _ecpg_sql_error(
		(struct _ecpg_sql_state_fault *)0
	);
	EXEC SQL WHENEVER SQLWARNING CALL _ecpg_sql_warning(no_warns);
	EXEC SQL CONNECT TO default;

	/*
	 *  Merge blob into pdfbox.page_text_utf8 table.
	 */
	EXEC SQL BEGIN TRANSACTION;
	for (int page = 1;  page < 2603538;  page++) {
		char path[12];
		struct stat st;

		//  realloc the page txt buffer, if need be.

		if (_stat(path, &st) == 0)
			break;
		if (st.st_size + 1 > txt_size) {
			txt = realloc(txt, st.st_size + 1);
			if (txt == NULL)
				die(EXIT_BAD_MALLOC, "realloc(txt) failed");
			txt_size = st.st_size + 1;
		}

		/*  slurp up the blob into memory. */

		snprintf(path, sizeof path, "%07d.txt", page);
		int txt_fd = _open(path, O_RDONLY, 0);
		_read_blob(txt_fd, txt, st.st_size);
		txt[txt_size] = 0;
		_close(txt_fd);

		EXEC SQL
		INSERT INTO pdfbox.page_text_utf8(
			pdf_blob,
			page_number,
			txt
	  	) VALUES (
			:pdf_blob::udig,
			:page_number,
			:txt
	  	)
  	  	ON CONFLICT
  			DO NOTHING
		;
	}
	EXEC SQL END TRANSACTION;

	_exit(EXIT_OK);
}
