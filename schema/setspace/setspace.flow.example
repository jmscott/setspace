#
#  Synopsis:
#	Flow blobs into setspace schema defined in PostgreSQL database
#  Usage:
#  	flowd server setspace.conf
#  See:
#  	schema/setspace/schema.sql
#  Note:
#	Add jsonorg test for first four bytes matching, where xx is ascii
#	(and probably a limited ascii set)
#
#		00 00 00 xx  UTF-32BE
#		00 xx 00 xx  UTF-16BE
#		xx 00 00 00  UTF-32LE
#		xx 00 xx 00  UTF-16LE
#		xx xx xx xx  UTF-8
#
#	taken from rfc4627, section 3
#
#	Note: in_has_byte_json_bracket_table is testing non-utf8 blobs.
#	      should only utf8 blobs be presented?

boot
{
	brr_capacity = 256;
	flow_worker_count = 16;
	os_exec_worker_count = 12;
	os_exec_capacity = 12;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

tail brr
{
	path = "spool/biod.brr";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name = "sslmode=disable";
	max_idle_conns = 1;
	max_open_conns = 64;
}

#
#  Synopsis:
#	Is the blob in the service table
#
sql query in_service_table row
{

	result row is (
		answer bool
	);

	statement = `

	SELECT exists (
	  select
		blob
	    from
		setspace.service
	    where
		blob = $1::udig
	);

	`;
}

command brr_on_network
{
	path = "true";
}

command brr_off_network
{
	path = "true";
}

sql exec merge_service
{

	statement = `

	INSERT into setspace.service(
		blob
	  ) VALUES(
	  	$1::udig
	  ) ON CONFLICT
	  	do nothing
	;

	`;
}

call brr_off_network()
  when
	(
		brr.chat_history == "no"
		and
		(
			brr.verb == "eat"
			or
			brr.verb == "get"
		)
	)
	or
	(
		brr.verb == "take"
		and
		brr.chat_history == "ok,ok,ok"
	)
;

call brr_on_network()
  when
  (
        (
		brr.verb == "put"
		or
		brr.verb == "get"
		or
		brr.verb == "eat"
		or
		brr.verb == "wrap"
		or
		brr.verb == "roll"
	)
	and
	brr.chat_history == "ok"
  ) or (
	brr.verb == "give"
	and
	brr.chat_history == "ok,ok"
  )
;

#  is the blob already in the service table?
#
query in_service_table(brr.udig);

#
#  Synopsis:
#	Delete zombies
#
command is_zombie_alive
{
	#  typically in $SETSPACE_ROOT/sbin

	path = "eat-blob";
	exit_status is OK when in {0, 1};
}

sql exec delete_blob
{
	statement = `

	DELETE from
	  	setspace.service
	  WHERE
	  	blob = $1::udig
	;
	
	`;

}

call is_zombie_alive(brr.udig)
  when
	#
	#  brr record says blob does not exist.
	#
  	brr_off_network.exit_status == 0
	and

	#
	#  Database thinks blob does exist.
	#
	in_service_table.answer == true
;

query delete_blob(brr.udig)
  when
  	is_zombie_alive.exit_status == 1
;

query merge_service(brr.udig)
  when
  	brr_on_network.exit_status == 0
	and
	in_service_table.answer == false
;

command service_exists
{
	path = "true";
	exit_status is OK when in {0, 1};
}

call service_exists(brr.udig)
  when
  	merge_service.rows_affected == 1
	or
	in_service_table.answer == true
;

#
#  Is the blob in the byte_count table?
#
sql query in_byte_count_table row
{

	result row is (
		answer bool
	);

	statement = `

	SELECT exists (
	  select
		blob
	    from
		setspace.byte_count
	    where
		blob = $1::udig
	);

	`;
}

command merge_byte_count
{
	path = "sbin/merge-byte_count";
	exit_status is OK when in {0, 1};
}

query in_byte_count_table(brr.udig);

#  merge an in service blob not in the byte count table

call merge_byte_count(brr.udig)
  when
  	in_byte_count_table.answer == false
	and
	service_exists.exit_status == 0
;

#  Is the blob in the byte_bitmap_table?

sql query in_byte_bitmap_table row
{

	result row is (
		answer bool
	);

	statement = `

	SELECT exists (
	  select
		blob
	    from
		setspace.byte_bitmap
	    where
		blob = $1::udig
	);
	
	`;
}

command merge_byte_bitmap
{
	path = "sbin/merge-byte_bitmap";
	exit_status is OK when in {0, 1};
}

query in_byte_bitmap_table(brr.udig);

call merge_byte_bitmap(brr.udig)
  when
  	in_byte_bitmap_table.answer == false
	and
	service_exists.exit_status == 0
;

command byte_bitmap_exists
{
	path = "true";
}

call byte_bitmap_exists()
  when
  	merge_byte_bitmap.exit_status == 0
	or
	in_byte_bitmap_table.answer == true
;

#
#  Synopsis:
#	Is in utf8 well formed table.
#  Note:
#	Need to first consult byte_bitmap for forbidden utf8 bytes.
#	is 0xff the only forbidden utf8 byte?
#
sql query in_is_utf8wf_table row
{

	result row is (
		answer	bool,
		is_utf8	bool
	);

	statement = `

	SELECT
	  exists (
	    select
		blob
	      from
		setspace.is_utf8wf
	      where
		blob = $1::udig
	  ),
	 (
	    select
	  	is_utf8
	      from
	    	setspace.is_utf8wf
	      where
	    	blob = $1::udig
	 );

	  `;
}

command get_is_utf8wf
{
	path = "sbin/get-is-utf8wf";
	exit_status is OK when in {
		0,			#  is well formed utf8
		1,			#  not well formed utf8
		2,			#  empty blob,
		3			#  blob does not exist
	};
}

sql query merge_is_utf8wf row
{
	#  Note: does the insert return a value upon conflict?
	statement = `

	INSERT into setspace.is_utf8wf(
		blob,
		is_utf8
	  ) SELECT
		$1::udig,
		case $2 
	  		when '0' then true
	  		when '1' then false
	  		when '2' then false
		end
  	  ON CONFLICT
  		do nothing
  	  RETURNING
  		is_utf8
	;

	`;
	
	result row is (
		is_utf8 bool
	);

}

query in_is_utf8wf_table(brr.udig);

#  does the blob contain the char 0xff?

sql query has_char_0xff row {
	
	statement = `
	
	SELECT
		(bm.bitmap & char_0xff) != all_zero
	  FROM
	  	setspace.byte_bitmap bm,

		--  all zero bits
		coalesce(
			B'0'::bit(256)
		) as all_zero,

		coalesce(
			B'1'::bit(256)
		) as char_0xff
	  where
	  	bm.blob = $1::udig
	;
	
	`;
	result row is (
		answer bool
	);
}

query has_char_0xff(brr.udig)
  when
	service_exists.exit_status == 0
;

call get_is_utf8wf(brr.udig)
  when
	has_char_0xff.answer == false
	and
	in_is_utf8wf_table.answer == false
;

sql exec merge_is_utf8wf_not
{
	statement = `

	INSERT INTO setspace.is_utf8wf(
		blob,
		is_utf8
	) VALUES (
		$1::udig,
		false
	) ON CONFLICT
		DO NOTHING
	`;

}

#  blob not utf8 when 0xff char exists
query merge_is_utf8wf_not(brr.udig)
  when
  	has_char_0xff.answer == true
	and
	in_is_utf8wf_table.answer == false
	and
	service_exists.exit_status == 0
;

query merge_is_utf8wf(brr.udig, get_is_utf8wf.exit_status)
  when
	(
		get_is_utf8wf.exit_status == 0
		or
		get_is_utf8wf.exit_status == 1
		or
		get_is_utf8wf.exit_status == 2		#  merge empty blob
	)
	and
	service_exists.exit_status == 0
;

#
#  Synopsis:
#	Populate byte_prefix_32 table
#
sql query in_byte_prefix_32_table row
{

	result row is (
		answer bool
	);

	statement = `

	SELECT exists (
	  select
		blob
	    from
		setspace.byte_prefix_32
	    where
		blob = $1::udig
	);
	
	`;
}

command merge_byte_prefix_32
{
	path = "sbin/merge-byte_prefix_32";
	exit_status is OK when in {0, 1};
}

query in_byte_prefix_32_table(brr.udig);

call merge_byte_prefix_32(brr.udig)
  when
  	in_byte_prefix_32_table.answer == false
	and
	service_exists.exit_status == 0
;

command core_exists
{
	path = "true";
}

#
#  Do the core tuples exist in the tables
#
#	setspace.{byte_bitmap, byte_count, byte_prefix, is_utf8wf}
#
call core_exists()
  when
	# 
  	#  tuple in table byte_prefix_32 does indeed exist
	#

  	(
		in_byte_prefix_32_table.answer == true
		or
		merge_byte_prefix_32.exit_status == 0
	)
	and
	byte_bitmap_exists.exit_status == 0

	# 
  	#  tuple in table byte_count does indeed exist
	#
	and
	(
		in_byte_count_table.answer == true
		or
		merge_byte_count.exit_status == 0
	)

	# 
  	#  tuple in table is_utf8wf does indeed exist
	#
	and
	(
		(
			in_is_utf8wf_table.answer == true
			or
			merge_is_utf8wf.rows_affected == 1
		)
		or
		merge_is_utf8wf_not.rows_affected == 1
	)
;

#  typically printable unix ascii file plus space, tab and new line characters.
#  control-r is excluded (which would be is_printable_dos).
#
#  Note: perhaps a view 'is_printable_unix'

sql query is_printable_unix row
{
	statement = `

	SELECT
		--  no non-ascii chars
		bm.bitmap::bit(128) = B'0'::bit(128)

		--  length > 0
		and
		bm.bitmap != all_zero
		and
		(forbidden_control & bm.bitmap) = all_zero
	  FROM
		setspace.byte_bitmap bm,

		--  all zero bits
		coalesce(
			B'0'::bit(256)
		) as all_zero,

		--  forbidden chars in typical printable ascii unix file
		--  notice tab and newline are not forbidden.

		coalesce(
		  --  first 9 control characters: decimal 0-8: NUL -> BS
		  (B'1111111111'::bit(256) >> 247)		|

		  --  21 control chars  - decimal 11-31: VT -> US
		  (B'111111111111111111111'::bit(256) >> 224)	|

		  --  del char - decimal 127
		  (B'1'::bit(256) >> 128)
		) as forbidden_control
	  WHERE
		bm.blob = $1::udig
	;`;

	result row is (
		answer bool
	);

}

#  Note: unfortunatly attributes and global names share a name space! 
#
command is_utf8_
{
	path = "true";
}

call is_utf8_()
  when
  	in_is_utf8wf_table.is_utf8 == true
	or
	merge_is_utf8wf.is_utf8 == true
;

query is_printable_unix(brr.udig)
  when
  	is_utf8_.exit_status == 0
	and
	byte_bitmap_exists.exit_status == 0
;

sql query is_drblob row
{
	statement = `

	SELECT
		--  all required chars
		(required_char & bm.bitmap) = required_char

		--  no forbidden chars
		and
		(forbidden_char & bm.bitmap) = all_zero
		and

		--  and prefix matches time stamp ^YYYY-MM-DDThh:mm:ss.nsec
		escaped_prefix ~ (
			-- century/year
			'^[234][0-9]{3}-'			||

			--  month
			'[01][0-9]-'				||

			--  day
			'[0123][0-9]'				||

			-- hour
			'T[012][0-9]:'				||

			-- minute
			'[0-6][0-9]:'				||

			-- second
			'[0-6][0-9]'				||

			-- nanosecond
			-- is the fractional part required?
			'[.][0-9]{1,9}'				||

			--  timezone.
			--  Note: still not sure if Z alone indicates GMT
			--  	  or unknown
			'[+-Z]'
		)
	  FROM
		setspace.byte_prefix_32 p32
		  natural join setspace.byte_bitmap bm,
		  lateral encode(p32.prefix, 'escape') escaped_prefix,

		  --  all of these chars must be in any drblob tuple
		  coalesce(
			--  new-line character - decimal 10
			(B'1'::bit(256) >> 245)		|

			--  tab character
			(B'1'::bit(256) >> 246)

		  ) as required_char,

		  -- forbidden chars in drblob tuple
		  coalesce(
			--  space character
			(B'1'::bit(256) >> 224)

		  ) as forbidden_char,

		  --  all zero bits
		  coalesce(
			  (B'0'::bit(256))
		  ) as all_zero
	  WHERE
		 p32.blob = $1::udig
	`;
	result row is (
		answer bool
	);
}

query is_drblob(brr.udig)
  when
  	is_printable_unix.answer == true
;

command append_drblob_brr
{
	path = "append-brr";
	argv = (
		"../drblob/spool/setspace.brr"
	);
}

call append_drblob_brr(
	brr.start_time,
	brr.netflow,
	brr.verb,
	brr.udig,
	brr.chat_history,
	brr.blob_size,
	brr.wall_duration
) when
	is_drblob.answer == true
	and
	core_exists.exit_status == 0
;

sql query in_new_line_count_table row
{
	statement = `

	SELECT exists (
	  select
	  	blob
	    from
	    	setspace.new_line_count
	    where
	    	blob = $1::udig
	);

	`;

	result row is (
		answer bool
	);
}

query in_new_line_count_table(brr.udig)
  when
  	in_is_utf8wf_table.is_utf8 == true
;

command merge_new_line_count
{
	path = "merge-new_line_count";
	exit_status is OK when in {
		0,			#  merged ok
		1			#  blob does not exist
	};
}

call merge_new_line_count(brr.udig)
  when
  	in_new_line_count_table.answer == false
;

#
#  Synopsis:
#	Is in is_udigish table.
#
sql query in_is_udigish_table row
{
	result row is (
		answer	bool,
		udigish	bool
	);

	statement = `

	SELECT
	  exists (
	    select
		blob
	      from
		setspace.is_udigish
	      where
		blob = $1::udig
	  ),
	 (
	    select
	  	udigish
	      from
	    	setspace.is_udigish
	      where
	    	blob = $1::udig
	 );

	  `;
}

sql exec merge_is_udigish
{
	#  Note: does the insert return a value upon conflict?
	statement = `

	INSERT into setspace.is_udigish(
		blob,
		udigish
	  ) SELECT
		$1::udig,
		case $2 
	  		when '0' then true
	  		when '1' then false
	  		when '2' then false
		end
  	  ON CONFLICT
  		do nothing
	;

	`;
	
}

#  check that a known utf8 blob is also in is_udigish

query in_is_udigish_table(brr.udig)
  when
	(
		in_is_utf8wf_table.answer == true
		and
		in_is_utf8wf_table.is_utf8 == true
	)
	or
	merge_is_utf8wf.is_utf8 == true
;

command get_is_udigish
{
	path = "sbin/get-bool-command";
	argv = (
		"is-udigish"
	);
	exit_status is OK when in {
		0,			#  command is true
		1,			#  command is false
		2,			#  empty blob,
		3			#  blob does not exist
	};
}

call get_is_udigish(brr.udig)
  when
	in_is_udigish_table.answer == false
;

query merge_is_udigish(brr.udig, get_is_udigish.exit_status)
  when
  	(
		get_is_udigish.exit_status == 0
		or
		get_is_udigish.exit_status == 1
		or
		get_is_udigish.exit_status == 2		#  merge empty blob
	)
	and
	service_exists.exit_status == 0
;

#
#  Synopsis:
#	Is in has_byte_json_bracket table.
#  Note:
#	Need to first test byte_bitmap for existence {} or [] anywhere!
#
sql query in_has_byte_json_bracket_table row
{

	result row is (
		answer	bool,
		has_bracket bool
	);

	statement = `

	SELECT
	  exists (
	    select
		blob
	      from
		setspace.has_byte_json_bracket
	      where
		blob = $1::udig
	  ),
	 (
	    select
	  	has_bracket
	      from
	    	setspace.has_byte_json_bracket
	      where
	    	blob = $1::udig
	 );

	  `;
}

sql query merge_has_byte_json_bracket row
{
	#  Note: does the insert return a value upon conflict?
	statement = `

	INSERT into setspace.has_byte_json_bracket(
		blob,
		has_bracket
	  ) SELECT
		$1::udig,
		case $2 
	  		when '0' then true
	  		when '1' then false
	  		when '2' then false
		end
  	  ON CONFLICT
  		do nothing
	  RETURNING
	  	has_bracket
	;

	`;
	result row is (
		has_bracket bool
	);
	
}

#  check that a known utf8 blob is also in has_byte_json_bracket

query in_has_byte_json_bracket_table(brr.udig)
  when
	in_is_utf8wf_table.is_utf8 == true
	or
	merge_is_utf8wf.is_utf8 == true
;

command get_has_byte_json_bracket
{
	path = "sbin/get-bool-command";
	argv = (
		"has-byte-json-bracket"
	);
	exit_status is OK when in {
		0,			#  command is true
		1,			#  command is false
		2,			#  empty blob,
		3			#  blob does not exist
	};
}

call get_has_byte_json_bracket(brr.udig)
  when
	in_has_byte_json_bracket_table.answer == false
;

query merge_has_byte_json_bracket(
	brr.udig,
	get_has_byte_json_bracket.exit_status
) when
  	get_has_byte_json_bracket.exit_status == 0
	or
	get_has_byte_json_bracket.exit_status == 1
;

command append_jsonorg_brr
{
	path = "append-brr";
	argv = (
		"../jsonorg/spool/setspace.brr"
	);
}

call append_jsonorg_brr(
	brr.start_time,
	brr.netflow,
	brr.verb,
	brr.udig,
	brr.chat_history,
	brr.blob_size,
	brr.wall_duration
) when
	(
		in_has_byte_json_bracket_table.has_bracket == true
		or
		merge_has_byte_json_bracket.has_bracket == true
	)
	and
	core_exists.exit_status == 0
;

command append_prefixio_brr
{
	path = "append-brr";
	argv = (
		"../prefixio/spool/setspace.brr"
	);
}

call append_prefixio_brr(
	brr.start_time,
	brr.netflow,
	brr.verb,
	brr.udig,
	brr.chat_history,
	brr.blob_size,
	brr.wall_duration
) when
  	core_exists.exit_status == 0
;

#
#  Synopsis:
#	Is in has_byte_xml_bracket table.
#  Note:
#	Need to first test byte_bitmap for existence <> anywhere!
#
sql query in_has_byte_xml_bracket_table row
{

	result row is (
		answer	bool,
		has_bracket bool
	);

	statement = `

	SELECT
	  exists (
	    select
		blob
	      from
		setspace.has_byte_xml_bracket
	      where
		blob = $1::udig
	  ),
	 (
	    select
	  	has_bracket
	      from
	    	setspace.has_byte_xml_bracket
	      where
	    	blob = $1::udig
	 );

	  `;
}

sql query merge_has_byte_xml_bracket row
{
	#  Note: does the insert return a value upon conflict?
	statement = `

	INSERT into setspace.has_byte_xml_bracket(
		blob,
		has_bracket
	  ) SELECT
		$1::udig,
		case $2 
	  		when '0' then true
	  		when '1' then false
	  		when '2' then false
		end
  	  ON CONFLICT
  		do nothing
  	  RETURNING
  		has_bracket
	;

	`;
	result row is (
		has_bracket bool
	);
}

#  check that a known utf8 blob is also in has_byte_xml_bracket

query in_has_byte_xml_bracket_table(brr.udig)
  when
	in_is_utf8wf_table.is_utf8 == true
	or
	merge_is_utf8wf.is_utf8 == true
;

command get_has_byte_xml_bracket
{
	path = "sbin/get-bool-command";
	argv = (
		"has-byte-xml-bracket"
	);
	exit_status is OK when in {
		0,			#  command is true
		1,			#  command is false
		2,			#  empty blob,
		3			#  blob does not exist
	};
}

call get_has_byte_xml_bracket(brr.udig)
  when
	in_has_byte_xml_bracket_table.answer == false
;

query merge_has_byte_xml_bracket(
	brr.udig,
	get_has_byte_xml_bracket.exit_status
) when
  	get_has_byte_xml_bracket.exit_status == 0
	or
	get_has_byte_xml_bracket.exit_status == 1
;

command append_expat2_brr
{
	path = "append-brr";
	argv = (
		"../expat2/spool/setspace.brr"
	);
}

call append_expat2_brr(
	brr.start_time,
	"fs~schema=expat2",
	brr.verb,
	brr.udig,
	brr.chat_history,
	brr.blob_size,
	brr.wall_duration
) when
	(
		in_has_byte_xml_bracket_table.has_bracket == true
		or
		merge_has_byte_xml_bracket.has_bracket == true
	)
	and
	core_exists.exit_status == 0
;

command append_fffile_brr
{
	path = "append-brr";
	argv = (
		"../fffile/spool/setspace.brr"
	);
}

call append_fffile_brr(
	brr.start_time,
	"fs~schema=fffile",
	brr.verb,
	brr.udig,
	brr.chat_history,
	brr.blob_size,
	brr.wall_duration
) when
  	core_exists.exit_status == 0
;
