#
#  Synopsis:
#	Flow blobs into "setcore" schema defined in PostgreSQL database
#  Usage:
#  	flowd server setcore.conf
#  See:
#  	schema/setcore/schema.sql
#	Investigate why 
#

boot
{
	brr_capacity = 24;
	flow_worker_count = 16;
	os_exec_worker_count = 8;
	os_exec_capacity = 4;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

tail bio4d
{
	path = "spool/bio4d.brr";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"search_path=setcore,setspace,public fallback_application_name=flowd.setcore sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 4;
}

command brr_ok
{
	path = "true";
}

call brr_ok()
  when
  	bio4d.chat_history == "ok"
	or
	bio4d.chat_history == "ok,ok"
	or
	bio4d.chat_history == "ok,ok,ok"
;

sql query blob_state row
{
	result row is (
		in_service bool,
		in_fault bool,
		is_earlier bool
	);
	statement = `
SELECT
	(SELECT EXISTS (
	  SELECT
		null
	    FROM
		setcore.service
	    WHERE
		blob = $1
	  )) AS in_service,
       (SELECT EXISTS (
         SELECT
	 	null
	   FROM
	   	setops.flowd_call_fault
	   WHERE
	   	blob = $1
		AND
		schema_name = 'setcore'
          )) AS in_fault,
	COALESCE((SELECT
		(discover_time > $2)
	  FROM
	  	setcore.blob
	  WHERE
	  	blob = $1
	), false) AS is_earlier
;
;`;
}

command brr_wrote
{
	path = "true";
}

call brr_wrote()
  when
  	brr_ok.exit_status == 0
	and
	(
		bio4d.verb == "put"
		or
		bio4d.verb == "take"
	)
;

sql exec upsert_blob
{
	statement = `
INSERT INTO setcore.blob (
	blob,
	discover_time
) VALUES (
	$1,
	$2
) ON CONFLICT (blob) DO UPDATE
  SET
  	discover_time = excluded.discover_time
  WHERE
	blob.discover_time > excluded.discover_time
;
	`;
}

query blob_state(bio4d.udig, bio4d.start_time)
  when
  	brr_ok.exit_status == 0
;

#
#  might update to earlier start_time.
#
query upsert_blob(bio4d.udig, bio4d.start_time)
  when
  	blob_state.in_fault == false
	and
	(
		blob_state.in_service == false
		or
		blob_state.is_earlier == true
	)
;

command eat_blob
{
	path = "blobio";
	argv = (
		"eat",
		"--service",
		"fs:${BLOBIO_ROOT}",
		"--udig"
	);
	exit_status is OK when in {0, 1};
}

sync map in_flight[string]bool;

call eat_blob(bio4d.udig)
  when
	in_flight.LoadOrStore(bio4d.udig, true).loaded == false

	#  did we just insert into table setcore.blob
	and
	(
		
		upsert_blob.rows_affected == 1
		or
		blob_state.in_service == false	#  not all facts found
	)
;


#  insert into table byte_bitmap
sql query in_byte_bitmap row
{
	result row is (
		answer bool
	);
	statement = `
SELECT EXISTS (
  SELECT
  	null
    FROM
    	setcore.byte_bitmap
    WHERE
    	blob = $1
);`;
}

command upsert_byte_bitmap
{
        path = "sbin/upsert-byte_bitmap";
        exit_status is OK when in {0, 1};
}

query in_byte_bitmap(bio4d.udig)
  when
  	eat_blob.exit_status == 0
;

call upsert_byte_bitmap(bio4d.udig)
  when
  	in_byte_bitmap.answer == false
;

#  insert into table byte_count

sql query in_byte_count row
{
	result row is (
		answer bool
	);
	statement = `
SELECT EXISTS (
  SELECT
  	null
    FROM
    	setcore.byte_count
    WHERE
    	blob = $1
);`;
}

command upsert_byte_count
{
        path = "sbin/upsert-byte_count";
        exit_status is OK when in {0, 1};
}

query in_byte_count(bio4d.udig)
  when
  	eat_blob.exit_status == 0
;

call upsert_byte_count(bio4d.udig)
  when
  	in_byte_count.answer == false
;

#  insert into table byte_prefix_32

sql query in_byte_prefix_32 row
{
	result row is (
		answer bool
	);
	statement = `
SELECT EXISTS (
  SELECT
  	null
    FROM
    	setcore.byte_prefix_32
    WHERE
    	blob = $1
);`;
}

command upsert_byte_prefix_32
{
        path = "sbin/upsert-byte_prefix_32";
        exit_status is OK when in {0, 1};
}

query in_byte_prefix_32(bio4d.udig)
  when
  	eat_blob.exit_status == 0
;

call upsert_byte_prefix_32(bio4d.udig)
  when
  	in_byte_prefix_32.answer == false
;

#  insert into table byte_suffix_32

sql query in_byte_suffix_32 row
{
	result row is (
		answer bool
	);
	statement = `
SELECT EXISTS (
  SELECT
  	null
    FROM
    	setcore.byte_suffix_32
    WHERE
    	blob = $1
);`;
}

command upsert_byte_suffix_32
{
        path = "sbin/upsert-byte_suffix_32";
        exit_status is OK when in {0, 1};
}

query in_byte_suffix_32(bio4d.udig)
  when
  	eat_blob.exit_status == 0
;

call upsert_byte_suffix_32(bio4d.udig)
  when
  	in_byte_suffix_32.answer == false
;

#  is utf8 encoded
sql query in_is_utf8wf_table row
{
	result row is (
		answer	bool,
		is_utf8	bool
	);

	statement = `

	SELECT EXISTS (
	  SELECT
		blob
	    FROM
		setcore.is_utf8wf
	    WHERE
		blob = $1::udig
	  ),
	 (SELECT
	  	is_utf8
	    FROM
	    	setcore.is_utf8wf
	    WHERE
	    	blob = $1::udig
	 );

	  `;
}

command get_is_utf8wf
{
	path = "sbin/get-is-utf8wf";
	exit_status is OK when in {
		0,			#  is well formed utf8
		1,			#  not well formed utf8
		2,			#  empty blob,
		3			#  blob does not exist
	};
}

sql query upsert_is_utf8wf row
{
	#  Note: does the insert return a value upon conflict?
	statement = `

	INSERT INTO setcore.is_utf8wf(
		blob,
		is_utf8
	) SELECT
		$1::udig,
		CASE $2 
	  		WHEN '0' THEN true
	  		WHEN '1' THEN false
	  		WHEN '2' THEN false
		END
  	  ON CONFLICT
  		DO NOTHING
  	  RETURNING
  		is_utf8
	;

	`;
	
	result row is (
		is_utf8 bool
	);

}

query in_is_utf8wf_table(bio4d.udig)
  when
  	eat_blob.exit_status == 0
;

#  does the blob contain the char 0xff?

sql query has_char_0xff row {
	
	statement = `
	
	SELECT
		(bm.bitmap & char_0xff) != all_zero
	  FROM
	  	setcore.byte_bitmap bm,

		--  all zero bits
		COALESCE(
			B'0'::bit(256)
		) AS all_zero,

		COALESCE(
			B'1'::bit(256)
		) AS char_0xff
	  WHERE
	  	bm.blob = $1::udig
	;
	
	`;
	result row is (
		answer bool
	);
}

#  Note: opimzation hack to prove not utf8 encoded

query has_char_0xff(bio4d.udig)
  when
	in_byte_bitmap.answer == true
	or
	upsert_byte_bitmap.exit_status == 0
;

call get_is_utf8wf(bio4d.udig)
  when
	has_char_0xff.answer == false
	and
	in_is_utf8wf_table.answer == false
;

sql exec upsert_is_utf8wf_not
{
	statement = `

	INSERT INTO setcore.is_utf8wf(
		blob,
		is_utf8
	) VALUES (
		$1::udig,
		false
	) ON CONFLICT
		DO NOTHING
	`;

}

#  blob not utf8 when 0xff char exists

query upsert_is_utf8wf_not(bio4d.udig)
  when
  	has_char_0xff.answer == true
	and
	in_is_utf8wf_table.answer == false
;

query upsert_is_utf8wf(bio4d.udig, get_is_utf8wf.exit_status)
  when
  	has_char_0xff.answer == false
	and
	in_is_utf8wf_table.answer == false
;
