/*
 *  Synopsis:
 *  	Merge a UTF8 blob read from stdin into table pdfbox.page_tsv_utf8
 *  Arguments:
 *	1	ts_config of text vector
 *  	2	pdf udig of the blob
 *  	3	page number of pdf
 *  	4	number of bytes to read on the standard input
 *  Exit Status:
 *  	0	ok, tuple was merged
 *  	1	Wrong number of arguments
 *  	2	Incorrect blob size
 *  	3	Incorrect pdf page number
 *  	4	malloc() of utf8 buffer failed
 *	5	read() of standard input failed
 *	6	syntax error on udig
 *	7	sql error
 *	8	sql warning
 *	9	blob too small
 *	10	blob too large
 *  Note:
 *	SQL ERROR code "54000: string is too long for tsvector" ought to
 *	mapped onto specific process exit code other than generic sql error.
 */

static char progname[] = "merge-stdin-page_tsv_utf8";

#define EXIT_OK		0
#define EXIT_BAD_ARGC	1
#define EXIT_BAD_SIZE	2
#define EXIT_BAD_PAGEN	3
#define EXIT_BAD_MALLOC 4
#define EXIT_BAD_READ	5
#define EXIT_BAD_UDIG	6
#define EXIT_SQLERROR	7
#define EXIT_SQLWARN	8
#define EXIT_BLOB_SMALL 9
#define EXIT_BLOB_BIG	10

#define COMMON_NEED_READ_BLOB
#define COMMON_NEED_A2UI32
#include "../../common.c"

#define COMMON_ECPG_NEED_SQL_WARNING
#define COMMON_ECPG_NEED_SQL_ERROR
#define COMMON_ECPG_STATE2EXIT

#include "../../common-ecpg.c"

//  ignore these sql warnings

static struct _ecpg_sql_state_fault no_warns[] =
{
	{"02000", -1},	//  no data found due to upsert conflict 
	{"54000", -1},	//  word is too long to be indexed
	{(char *)0, 0}
};

int
main(int argc, char **argv)
{
	int stdin_size;
	size_t len;
	char *sz, *pn;

EXEC SQL BEGIN DECLARE SECTION;
	char *ts_conf;
	char *pdf_blob;
	int page_number;
	char *txt;
EXEC SQL END DECLARE SECTION;

	if (argc != 5)
		die(EXIT_BAD_ARGC, "wrong number of arguments");
	close(1);

	// the text search configuration
	ts_conf = argv[1];

	//  parse the pdf_udig as argv[1]

	pdf_blob = argv[2];
	len = strlen(pdf_blob);
	if (len < 3 || len > 255 || strchr(pdf_blob, ':') == NULL)
		die2(EXIT_BAD_UDIG, "syntax error in pdf udig", pdf_blob);

	//  parse the pdf page number from argv[3]

	pn = argv[3];
	page_number = a2ui32(pn, "page number", EXIT_BAD_PAGEN);
	if (page_number == 0)
		die2(EXIT_BAD_PAGEN, "pdf page number is 0", pn);

	//  parse the page blob size as argv[3]

	sz = argv[4];
	stdin_size = a2ui32(sz, "page blob input size", EXIT_BAD_SIZE);

	//  allocate buffer to hold entire text of page blob read from stdin

	txt = malloc(stdin_size + 1);
	if (txt == NULL)
		die2(EXIT_BAD_MALLOC, "malloc(page text stdin) failed", sz);
	txt[stdin_size] = 0;

	_read_blob(0, txt, stdin_size);

	EXEC SQL WHENEVER SQLERROR CALL _ecpg_sql_error((void *)0);
	EXEC SQL WHENEVER SQLWARNING CALL _ecpg_sql_warning(no_warns);
	EXEC SQL CONNECT TO default;

	/*
	 *  Merge blob into pdfbox.page_tsv_utf8 table.
	 */
	EXEC SQL BEGIN TRANSACTION;
	EXEC SQL
	  INSERT INTO pdfbox.page_tsv_utf8(
		pdf_blob,
		page_number,
		ts_conf,
		tsv
	  ) VALUES (
		:pdf_blob::udig,
		:page_number,
		:ts_conf::regconfig,
		to_tsvector(:ts_conf::regconfig, :txt)
	  )
  	  ON CONFLICT
  		DO NOTHING
	;
	EXEC SQL END TRANSACTION;

	_exit(EXIT_OK);
}
