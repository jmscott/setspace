#
#  Synopsis:
#	Dump postgres tables with mutable tuples in pg_dump-mutable.sql.bz2
#  Description:
#	Certain tables in setspace contain data that cannot be derived
#	by transforming/extracing from blobs, like my_title.  Our goal,
#	of course, to push snapshots into blobs that contain an audit graph ...
#  Blame:
#  	jmscott@setspace.com
#  	setspace@gmail.com
#
PROG=$(basename $0)
LOCK=

log()
{
	echo "$(date +'%Y/%m/%d %H:%M:%S'): $PROG#$$: $@"
}

die()
{
	log "ERROR: $@" >&2
	exit 1
}

leave()
{
	STATUS=$?
	_STATUS=

	if [ -n "$LOCK" ];  then
		if rm $LOCK;  then
			true
		else
			log "ERROR: rm $LOCK failed"
			test -f $LOCK && log "PANIC: $PROG may not restart"
			_STATUS=255
		fi
	fi
	test -n "$_STATUS" -a $STATUS = 0 && STATUS=$_STATUS
	log 'good bye, cruel world'
	exit $STATUS
}

catch_QUIT()
{
	log 'caught QUIT signal'
	leave
}
catch_TERM()
{
	log 'caught TERM signal'
	leave
}

log 'hello, world'
trap leave EXIT
trap catch_QUIT QUIT
trap catch_TERM TERM

case "$SETSPACE_ROOT" in
'')
	die 'SETSPACE_ROOT environment variable not defined'
	;;
*)
	log "SETSPACE_ROOT=$SETSPACE_ROOT"
	cd $SETSPACE_ROOT || die "cd $SETSPACE_ROOT failed"
	test -r etc/profile || die "can't read file $(pwd)/etc/profile"
	. etc/profile

	log "PATH=$PATH"
	;;
esac

log "PGHOST=$PGHOST"
log "PGPORT=$PGPORT"
log "PGUSER=$PGUSER"
log "PGASSWORD=$PGPASSWORD"
log "PGDATABASE=$PGDATABASE"

#
#  Are we already running.
#
_LOCK=run/$PROG.pid
if [ -f $_LOCK ];  then
	log "WARN: is another $PROG running with pid #$(cat $_LOCK)?"
	log "WARN: to restart, remove $(pwd)/$_LOCK file"
	leave
fi
LOCK=$_LOCK
echo $$ >$LOCK || die "echo $$ >$LOCK failed"

COUNT=0
while [ "$1" ];  do
	case "$1" in
	--table)
		shift
		T="$1"
		test -n "$T" || die 'option --table: missing table name'
		TABLES="$TABLES -t $T"
		log "table: $1"
		COUNT=$(echo $COUNT | expr $COUNT + 1)
		;;
	--*)
		die "unknown option: $1"
		;;
	*)
		die "unknown argument: $1"
		;;
	esac
	shift
done

test $COUNT = 0 && {
	log 'WARN: no tables given on command line, try --table'
	exit 0
}

#
#  Dump the tables
#
SQL=backup/pg_dump-mutable-$(date +'%a').sql
log "starting pg_dump -a to $SQL"
pg_dump -a $TABLES >$SQL || die "pg_dump -a $TABLES failed"
log "sql file size: $(du -h $SQL | sed 's/[ \t].*//')"

#
#  BZip the backup.
#
log "starting bzip2 --best --force $OUT"
bzip2 --force $SQL || die "bzip2 --best --force $OUT failed"
log "bzip file size: $(du -h $SQL.bz2 | sed 's/[ \t].*//')"
