#
#  Synopsis:
#	Populate a PostgreSQL schema with the facts extracted by Apache pdfbox 
#  See:
#	schema.sql
#

boot
{
	brr_capacity = 8;
	flow_worker_count = 4;
	os_exec_worker_count = 4;
	os_exec_capacity = 4;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"fallback_application_name=pdfbox.flow sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 8;
}

tail brr
{
	path = "spool/prefixio.brr";
}

command brr_on_network
{
	path = "true";
}

call brr_on_network()
  when
  (
        (
		brr.verb == "put"
		or
		brr.verb == "get"
		or
		brr.verb == "eat"
		or
		brr.verb == "wrap"
		or
		brr.verb == "roll"
	)
	and
	brr.chat_history == "ok"
  ) or (
	brr.verb == "give"
	and
	brr.chat_history == "ok,ok"
  )
;

sql query in_service row
{
	statement = `

	SELECT EXISTS (
	  SELECT
	  	blob
	    FROM
	    	setcore.service
	    WHERE
	    	blob = $1::udig
	);
	`;

	result row is (
		answer bool
	);
}

query in_service(brr.udig)
  when
  	brr_on_network.exit_status == 0
;

#  determine if the pdf exists in various pddocument tables
#  and extract_pages_utf8

sql query in_pddocs row
{
	statement = `

	SELECT
		--  pddocument: does row exist in table

		EXISTS (
		  SELECT
		  	blob
		    FROM
		    	pdfbox.pddocument
		    WHERE
		    	blob = $1::udig
		),
		EXISTS (
		  SELECT
		  	blob
		    FROM
		    	pdfbox.fault_process
		    WHERE
		    	table_name = 'pddocument'
			AND
		    	blob = $1::udig
		),
		--  pddocument_information: does row exist in table
		EXISTS (
		  SELECT
		  	blob
		    FROM
		    	pdfbox.pddocument_information
		    WHERE
		    	blob = $1::udig
		),
		EXISTS (
		  SELECT
		  	blob
		    FROM
		    	pdfbox.fault_process
		    WHERE
		    	table_name = 'pddocument_information'
			AND
		    	blob = $1::udig
		)
	;
	`;

	result row is (
		ok_pddocument			bool,
		flt_pddocument			bool,
		ok_pddocument_information	bool,
		flt_pddocument_information		bool
	);
}

query in_pddocs(brr.udig)
  when
  	in_service.answer == true
;

###
#
#  PDDocument
#
###
command merge_pddocument
{
	path = "merge-pddocument";
	exit_status is OK when in {
                0,      #  ok, extracted pddocument info and stored into PG
                1,      #  pdf load failed (but still tuple stored in PG)
                2       #  blob does not exist
        };
}

command lock_pddocument
{
	path = "tas-run-lock";
	argv = (
		"merge-pddocument"
	);
	exit_status is OK when in {
                0,			#  ok, lock file created
                1			#  lock already exists
        };
}

command unlock_pddocument
{
	path = "tas-run-unlock";
	argv = (
		"merge-pddocument"
	);
	exit_status is OK when in {
                0,			#  ok, lock file removed
                1			#  lock file does not exist
        };
}

call lock_pddocument(brr.udig)
  when
  	in_pddocs.ok_pddocument == false
	and
	in_pddocs.flt_pddocument == false
;

call merge_pddocument(brr.udig)
  when
  	lock_pddocument.exit_status == 0
;

call unlock_pddocument(brr.udig)
  when
	#  uggh.  kludgy way to test for process termination
  	merge_pddocument.exit_status == 0
	or
  	merge_pddocument.exit_status != 0
;

###
#
#  PDDocumentInformation
#
###
command merge_pddocument_information
{
	path = "merge-pddocument_information";
	exit_status is OK when in {
                0,      #  ok, extracted pddocument info and stored into PG
                1,      #  pdf load failed (but still tuple stored in PG)
                2       #  blob does not exist
        };
}

command lock_pddocument_information
{
	path = "tas-run-lock";
	argv = (
		"merge-pddocument_information"
	);
	exit_status is OK when in {
                0,			#  ok, lock file created
                1			#  lock already exists
        };
}

command unlock_pddocument_information
{
	path = "tas-run-unlock";
	argv = (
		"merge-pddocument_information"
	);
	exit_status is OK when in {
                0,			#  ok, lock file removed
                1			#  lock file does not exist
        };
}

call lock_pddocument_information(brr.udig)
  when
  	in_pddocs.ok_pddocument_information == false
	and
  	in_pddocs.flt_pddocument_information == false
;

call merge_pddocument_information(brr.udig)
  when
  	lock_pddocument_information.exit_status == 0
;

call unlock_pddocument_information(brr.udig)
  when
	#  kludgy way to test for process termination
  	merge_pddocument_information.exit_status == 0
	or
  	merge_pddocument_information.exit_status != 0
;

###
#
#  ExtractPagesUTF8
#
###
command merge_extract_pages_utf8
{
	path = "merge-extract_pages_utf8";
	exit_status is OK when in {
                0,      #  ok, extracted pddocument info and stored into PG
                1      #  pdf load failed (but still tuple stored in PG)
        };
}

command lock_extract_pages_utf8
{
	path = "tas-run-lock";
	argv = (
		"merge-extract_pages_utf8"
	);
	exit_status is OK when in {
                0,			#  ok, lock file created
                1			#  lock already exists
        };
}

command unlock_extract_pages_utf8
{
	path = "tas-run-unlock";
	argv = (
		"merge-extract_pages_utf8",
		"english"
	);
	exit_status is OK when in {
                0,			#  ok, lock file removed
                1			#  lock file does not exist
        };
}

#  determine if the pages of the pdf have been extracted.

sql query in_extract row
{
	statement = `

	SELECT
		--  extract_pages_utf8: does row exist in table

		EXISTS (
		  SELECT
		  	pdf_blob
		    FROM
		    	pdfbox.extract_pages_utf8
		    WHERE
		    	pdf_blob = $1::udig
		)
		OR
		EXISTS (
		  SELECT
		  	blob
		    FROM
		    	pdfbox.fault_process
		    WHERE
		    	table_name = 'extract_pages_utf8'
			AND
		    	blob = $1::udig
		)
	;
	`;

	result row is (
		done		bool
	);
}
