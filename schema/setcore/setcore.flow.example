#
#  Synopsis:
#	Flow blobs into "setcore" schema defined in PostgreSQL database
#  Usage:
#  	flowd server setcore.conf
#  See:
#  	schema/setcore/schema.sql
#

boot
{
	brr_capacity = 24;
	flow_worker_count = 16;
	os_exec_worker_count = 8;
	os_exec_capacity = 4;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

#
#  Synopsis:
#	Does the blob exist in storage?
#
command eat_blob
{
	path = "blobio";
	argv = (
		"eat",
		"--service",
		"fs:${BLOBIO_ROOT}",
		"--udig"
	);
	exit_status is OK when in {0, 1};
}

sync map seen_udig[string]bool;

tail bio4d
{
	path = "spool/bio4d.brr";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"fallback_application_name=flowd.setcore sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 2;
}

command first_flight
{
	path = "true";
}

command byte_bitmap_exists
{
	path = "true";
}

call first_flight()
  when
  	seen_udig.LoadOrStore(bio4d.udig, true).loaded == false
;

call eat_blob(bio4d.udig)
  when
  	first_flight.exit_status == 0
;

#
#  Synopsis:
#	Is the blob in the service table
#
sql query in_service_table row
{
	result row is (
		answer bool
	);

	statement = `

	SELECT EXISTS (
	  SELECT
		blob
	    FROM
		setcore.service
	    WHERE
		blob = $1::udig
	);

	`;
}

query in_service_table(bio4d.udig)
  when
  	first_flight.exit_status == 0
;

sql exec delete_service
{
	statement = `

	DELETE FROM
	  	setcore.service
	  WHERE
	  	blob = $1::udig
	;
	
	`;

}

query delete_service(bio4d.udig)
  when
  	eat_blob.exit_status == 1
	and
	in_service_table.answer == true
;

sql exec merge_service
{
	statement = `

	INSERT INTO setcore.service(
		blob
	  ) VALUES(
	  	$1::udig
	  ) ON CONFLICT
	  	DO NOTHING
	;

	`;
}

query merge_service(bio4d.udig)
  when
  	eat_blob.exit_status == 0
	and
	in_service_table.answer == false
;

command service_sunk
{
	path = "true";
}

call service_sunk(bio4d.udig)
  when
	#
	#  Another process may have just merged this blob into setcore.service,
	#  in which case sqlstate == "00000" but rows affected == 0.
	#  The sqlstate code is different for exec versus a query that returns
	#  tuples.  An exec always returns 00000, regardless if
	#  rows_affected == 0, which is not true for a query returning tuples,
	#  which returns sqlstate  "02000".
	#

  	merge_service.rows_affected == 1
	or
	merge_service.sqlstate == "00000"
	or
	in_service_table.answer == true
;

#
#  Is the blob in the byte_count table?
#
sql query in_byte_count_table row
{
	result row is (
		answer bool
	);

	statement = `

	SELECT EXISTS (
	  SELECT
		blob
	    FROM
		setcore.byte_count
	    WHERE
		blob = $1::udig
	);

	`;
}

command merge_byte_count
{
	path = "sbin/merge-byte_count";
	exit_status is OK when in {0, 1};
}

query in_byte_count_table(bio4d.udig)
  when
  	service_sunk.exit_status == 0
;

#  merge an in service blob not in the byte count table

call merge_byte_count(bio4d.udig)
  when
  	in_byte_count_table.answer == false
;

#
#  Is the blob in the byte_bitmap table?
#
sql query in_byte_bitmap_table row
{
	result row is (
		answer bool
	);

	statement = `

	SELECT EXISTS (
	  SELECT
		blob
	    FROM
		setcore.byte_bitmap
	    WHERE
		blob = $1::udig
	);

	`;
}

command merge_byte_bitmap
{
	path = "sbin/merge-byte_bitmap";
	exit_status is OK when in {0, 1};
}

query in_byte_bitmap_table(bio4d.udig)
  when
  	service_sunk.exit_status == 0
;

#  merge an in service blob not in the byte count table

call merge_byte_bitmap(bio4d.udig)
  when
  	in_byte_bitmap_table.answer == false
;

call byte_bitmap_exists(bio4d.udig)
  when
  	in_byte_bitmap_table.answer == true
	or
	merge_byte_bitmap.exit_status == 0
;

command merge_byte_prefix_32
{
	path = "sbin/merge-byte_prefix_32";
	exit_status is OK when in {0, 1};
}

#
#  Synopsis:
#	Populate byte_prefix_32 table
#
sql query in_byte_prefix_32_table row
{

	result row is (
		answer bool
	);

	statement = `

	SELECT exists (
	  SELECT
		blob
	    FROM
		setcore.byte_prefix_32
	    WHERE
		blob = $1::udig
	);
	
	`;
}

query in_byte_prefix_32_table(bio4d.udig)
  when
  	service_sunk.exit_status == 0
;

#  merge an in service blob not in the byte count table

call merge_byte_prefix_32(bio4d.udig)
  when
  	in_byte_prefix_32_table.answer == false
;

command merge_byte_suffix_32
{
	path = "sbin/merge-byte_suffix_32";
	exit_status is OK when in {0, 1};
}

#
#  Synopsis:
#	Populate byte_suffix_32 table
#
sql query in_byte_suffix_32_table row
{

	result row is (
		answer bool
	);

	statement = `

	SELECT EXISTS (
	  SELECT
		blob
	    FROM
		setcore.byte_suffix_32
	    WHERE
		blob = $1::udig
	);
	
	`;
}

query in_byte_suffix_32_table(bio4d.udig)
  when
  	service_sunk.exit_status == 0
;

#  merge an in service blob not in the byte count table

call merge_byte_suffix_32(bio4d.udig)
  when
  	in_byte_suffix_32_table.answer == false
;

#
#  Synopsis:
#	Is in utf8 well formed table.
#  Note:
#	Need to first consult byte_bitmap for forbidden utf8 bytes.
#	is 0xff the only forbidden utf8 byte?
#
sql query in_is_utf8wf_table row
{
	result row is (
		answer	bool,
		is_utf8	bool
	);

	statement = `

	SELECT EXISTS (
	  SELECT
		blob
	    FROM
		setcore.is_utf8wf
	    WHERE
		blob = $1::udig
	  ),
	 (SELECT
	  	is_utf8
	    FROM
	    	setcore.is_utf8wf
	    WHERE
	    	blob = $1::udig
	 );

	  `;
}

command get_is_utf8wf
{
	path = "sbin/get-is-utf8wf";
	exit_status is OK when in {
		0,			#  is well formed utf8
		1,			#  not well formed utf8
		2,			#  empty blob,
		3			#  blob does not exist
	};
}

sql query merge_is_utf8wf row
{
	#  Note: does the insert return a value upon conflict?
	statement = `

	INSERT INTO setcore.is_utf8wf(
		blob,
		is_utf8
	) SELECT
		$1::udig,
		CASE $2 
	  		WHEN '0' THEN true
	  		WHEN '1' THEN false
	  		WHEN '2' THEN false
		END
  	  ON CONFLICT
  		DO NOTHING
  	  RETURNING
  		is_utf8
	;

	`;
	
	result row is (
		is_utf8 bool
	);

}

query in_is_utf8wf_table(bio4d.udig)
  when
  	service_sunk.exit_status == 0
;

#  does the blob contain the char 0xff?

sql query has_char_0xff row {
	
	statement = `
	
	SELECT
		(bm.bitmap & char_0xff) != all_zero
	  FROM
	  	setcore.byte_bitmap bm,

		--  all zero bits
		COALESCE(
			B'0'::bit(256)
		) AS all_zero,

		COALESCE(
			B'1'::bit(256)
		) AS char_0xff
	  WHERE
	  	bm.blob = $1::udig
	;
	
	`;
	result row is (
		answer bool
	);
}

query has_char_0xff(bio4d.udig)
  when
	byte_bitmap_exists.exit_status == 0
;

call get_is_utf8wf(bio4d.udig)
  when
	has_char_0xff.answer == false
	and
	in_is_utf8wf_table.answer == false
;

sql exec merge_is_utf8wf_not
{
	statement = `

	INSERT INTO setcore.is_utf8wf(
		blob,
		is_utf8
	) VALUES (
		$1::udig,
		false
	) ON CONFLICT
		DO NOTHING
	`;

}

#  blob not utf8 when 0xff char exists

query merge_is_utf8wf_not(bio4d.udig)
  when
  	has_char_0xff.answer == true
	and
	in_is_utf8wf_table.answer == false
	and
	service_sunk.exit_status == 0
;

query merge_is_utf8wf(bio4d.udig, get_is_utf8wf.exit_status)
  when
	(
		get_is_utf8wf.exit_status == 0
		or
		get_is_utf8wf.exit_status == 1
		or
		get_is_utf8wf.exit_status == 2		#  merge empty blob
	)
	and
	service_sunk.exit_status == 0
;

command core_exists
{
	path = "true";
}

#
#  Do the core tuples exist in the tables
#
#	setcore.{byte_bitmap, byte_count, byte_prefix, is_utf8wf}
#  Note:
#	core_exists() is not properly spin waiting for existence in all tables,
#	so request records are not properly appened to
#	prefixio/spool/setcore.bio4d from time to time.
#
call core_exists()
  when
	#
  	#  tuple in table byte_prefix_32 does indeed exist
	#
  	(
		in_byte_prefix_32_table.answer == true
		or
		merge_byte_prefix_32.exit_status == 0
	)
	and
	#
  	#  tuple in table byte_suffix_32 does indeed exist
	#
  	(
		in_byte_suffix_32_table.answer == true
		or
		merge_byte_suffix_32.exit_status == 0
	)
	and
	#
  	#  tuple in table byte_suffix_32 does indeed exist
	#
  	(
		in_byte_bitmap_table.answer == true
		or
		merge_byte_bitmap.exit_status == 0
	)

	# 
  	#  tuple in table byte_count does indeed exist
	#
	and
	(
		in_byte_count_table.answer == true
		or
		merge_byte_count.exit_status == 0
	)

	# 
  	#  tuple in table is_utf8wf does indeed exist
	#
	and
	(
		(
			in_is_utf8wf_table.answer == true
			or
			merge_is_utf8wf.rows_affected == 1
			or
			merge_is_utf8wf.sqlstate == "02000"
		)
		or
		merge_is_utf8wf_not.rows_affected == 1
	)
;

command append_fffile5_brr
{
	path = "append-brr";
	argv = (
		"../fffile5/spool/setcore.brr"
	);
}

call append_fffile5_brr(
	bio4d.start_time,
	"fs~setcore>>fffile5",
	bio4d.verb,
	bio4d.udig,
	bio4d.chat_history,
	bio4d.blob_size,
	bio4d.wall_duration
) when
  	core_exists.exit_status == 0
;

command append_prefixio_brr
{
	path = "append-brr";
	argv = (
		"../prefixio/spool/setcore.brr"
	);
}

call append_prefixio_brr(
	bio4d.start_time,
	"fs~schema=prefixio",
	bio4d.verb,
	bio4d.udig,
	bio4d.chat_history,
	bio4d.blob_size,
	bio4d.wall_duration
) when
  	core_exists.exit_status == 0
;
