#
#  Synopsis:
#	Route blobs to schemas based upon patterns in a json blob.
#  Usage:
#  	flowd server etc/jsonio.flow
#  Note:
#	Consder a cli tool like jq, keeping load off pgdb.
#
#	Think about an SQL table driven route table instead of explicit recipes.
#

boot
{
	brr_capacity = 256;
	flow_worker_count = 32;

	#
	#  No processes are invoked
	#
	#  Note:
	#	Since no workers can we set to 0?
	#
	os_exec_worker_count = 16;
	os_exec_capacity = 8;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"fallback_application_name=jsonio.flow sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 16;
}

tail jsonorg
{
	path = "spool/jsonorg.brr";
}

sync map first_seen_blob[string]bool;

command first_seen
{
	path = "true";
}

#
#  Route to schema when top level object "mycore.schema.setspace.com" exits.
#
sql query is_mycore_json row
{
	statement = `
SELECT EXISTS (
  SELECT
  	blob
    FROM
	jsonorg.jsonb_255 j
    WHERE
    	j.blob = $1
	AND
        doc->>'setspace_schema' = 'mycore.schema.setspace.com'
  )`;
	result row is (
		exists bool
	);
}

call first_seen(jsonorg.udig)
  when
  	first_seen_blob.LoadOrStore(jsonorg.udig, true).loaded == false
;

query is_mycore_json(jsonorg.udig)
  when
  	first_seen.exit_status == 0
;

command append_mycore_brr
{
       path = "append-brr";
       argv = (
               "../mycore/spool/jsonio.brr"
       );
}

call append_mycore_brr(
       jsonorg.start_time,
       jsonorg.transport,
       jsonorg.verb,
       jsonorg.udig,
       jsonorg.chat_history,
       jsonorg.blob_size,
       jsonorg.wall_duration
) when
	is_mycore_json.exists == true
;
