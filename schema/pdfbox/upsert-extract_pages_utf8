#!/usr/bin/env bash
#
#  Synopsis:
#	Extract all pages from pdf and upsert into tables extract_page_utf8.
#  Usage:
#	upsert-extract_pages_utf8 <tsconfig> <pdf blob>
#	upsert-extract_pages_utf8 english sha:9611866f8547cbf7 ...
#  Exit Status
#  	0	ok, tuple was upsertd
#	1	blob does not exist
#	2	unexpected error
#
#  Environment:
#	BLOBIO_SERVICE		#  required
#	BLOBIO_GET_SERVICE
#	BLOBIO_ALGORITHM	#  required
#	TMPDIR
#
#  Java Classes:
#	import org.apache.pdfbox.io.IOUtils;
#	import org.apache.pdfbox.pdmodel.PDDocument;
#	import org.apache.pdfbox.pdmodel.encryption.AccessPermission;
#	import org.apache.pdfbox.text.PDFTextStripper;
#  Note:
#	Page blobs may be orphaned if the transaction is aborted.
#	Perhaps a json blob summarizing the transaction should be created.
#

START_EPOCH=$(date +%s)
PROG=upsert-extract_pages_utf8

SERVICE=${BLOBIO_GET_SERVICE:=$BLOBIO_SERVICE}
WORK_DIR=${TMPDIR:=/tmp}/$PROG.$$.d
ALGORITHM=${BLOBIO_ALGORITHM:=btc20}
GET_SERVICE="--service ${BLOBIO_GET_SERVICE:=$BLOBIO_SERVICE}"

die()
{
	#  upsert the error into 
	if [ -n "$PDF_UDIG" ];  then
		source $SETSPACE_ROOT/schema/pdfbox/lib/upsert-fault.bash
		die_upsert upsert_extract_pages_utf8 $@
	fi
	echo "$PROG: ERROR: $@" >&2
	exit 2
}

leave()
{
	STATUS=$?
	cd .. && rm -rf "$WORK_DIR"
	exit $STATUS
}
trap leave EXIT
trap '' PIPE

test $# = 2 || die "wrong number of cli args: got $#, need 2"
TS_CONF=$1
PDF_UDIG=$2

mkdir -p $WORK_DIR || die "mkdir work $WORK_DIR failed: exit status=$?"
cd $WORK_DIR || die "cd work $WORK_DIR failed: exit status=$?"

#  fetch the pdf blob into work directory

PDF=$PDF_UDIG.pdf
blobio get --udig $PDF_UDIG --output-path $PDF $GET_SERVICE
STATUS=$?

case $STATUS in
0)
	;;
1)
	exit 1
	;;
*)
	die "blobio get pdf failed: exit status=$?"
	;;
esac

#  let pdfbox extract individual pages into files 0000001.txt, 0000002.txt ...
#  write digest for page in 0000001.udig, 0000002.udig

java 									\
	-server								\
	-cp $CLASSPATH							\
	ExtractPagesUTF8						\
	<$PDF >STDOUT 2>STDERR
STATUS=$?
test $STATUS = 0 || die "java ExtractPagesUTF8 failed: exit status=$STATUS"
test -e STDOUT || die "java write to stdout failed" 
test -e STDERR || die "java write to stderr failed" 

#  loop through the page files to put the blobs and record udigs in <page>.udig

find . -maxdepth 1 -name '[0-9][0-9][0-9][0-9][0-9][0-9][0-9].txt' -type f   |
  sort									     |
  while read PAGE_PATH;  do

	#  calculate the digest of the page of text

	PAGE_UDIG=$ALGORITHM:$(
		blobio eat						\
			--input-path $PAGE_PATH				\
			--algorithm $ALGORITHM
	)
	test $? = 0 || die "blobio eat page text failed: exit status=$?"

	#  put the page of text to blob storage

	blobio put							\
		--input-path $PAGE_PATH					\
		--udig $PAGE_UDIG					\
		--service $BLOBIO_SERVICE				||
		die "blobio put page failed: exit status=$?"

	UDIG_PATH=$(basename $PAGE_PATH .txt).udig
	echo $PAGE_UDIG >$UDIG_PATH ||
				die "echo page udig > failed: exit status=$?"

	#  Note: blob must appear in setcore.service or foreign key fails!

	spin-wait-blob setcore.service blob 32 $PAGE_UDIG
	STATUS=$?
	case $STATUS in
	0)
		;;		#  blob appeared in table setcore.service
	1)
		die 'spin-wait-blob: page txt: blob not in setcore.service'
		;;
	*)
		die "spin-wait-blob failed: exit status=$STATUS"
		;;
	esac
		
done
STATUS=${PIPESTATUS[*]}
case "$STATUS" in
'0 0 0')
	;;
*)
	die "find | page text failed: exit status=$STATUS"
	;;
esac

#  sql upsert all pages, text, tsf in database in a single transaction

upsert-all-extract_pages_utf8 "$TS_CONF" $PDF_UDIG 2>STDERR ||
	die "upsert-all-extract_pages_utf8 failed: exit status=$?"
