/*
 *  Synopsis:
 *  	Merge a UTF8 blob from stdin into table pdfbox2.page_text_utf8
 *  Usage:
 *	merge-stdin-page_text_utf8 <udig> <tsv_config> <text_byte_count>
 *  Arguments:
 *  	1	udig of the pdf blob
 *	2	page number in pdf
 *  	3	number of bytes to read on the standard input
 *  Exit Status:
 *  	0	ok, tuple was merged
 *  	1	Wrong number of arguments
 *  	2	Incorrect pdf page number
 *  	3	Incorrect blob size
 *  	4	malloc() of utf8 buffer failed
 *	5	read() of standard input failed
 *	6	syntax error on udig
 *	7	sql error
 *	8	sql warning
 *	9	blob too small
 *	10	blob too large
 */

static char progname[] = "merge-stdin-page_text_utf8";

#define EXIT_OK		0
#define EXIT_BAD_ARGC	1
#define EXIT_BAD_PAGEN	2
#define EXIT_BAD_SIZE	3
#define EXIT_BAD_MALLOC 4
#define EXIT_BAD_READ	5
#define EXIT_BAD_UDIG	6
#define EXIT_SQLERROR	7
#define EXIT_SQLWARN	8
#define EXIT_BLOB_SMALL 9
#define EXIT_BLOB_BIG	10

#define COMMON_NEED_READ_BLOB
#include "../../common.c"

#define COMMON_ECPG_NEED_SQL_WARNING
#define COMMON_ECPG_NEED_SQL_ERROR
#include "../../common-ecpg.c"

#include <stdlib.h>

static struct _ecpg_sql_state_fault no_warns[] =
{
	{"02000", -1},	//  no data found due to upsert conflict 
	{(char *)0, -1}
};

int
main(int argc, char **argv)
{
	int stdin_size;
	size_t len;
	char *sz, *pn;

EXEC SQL BEGIN DECLARE SECTION;
	char *pdf_blob;
	char *page_txt;
	int page_number;
EXEC SQL END DECLARE SECTION;

	if (argc != 4)
		die(EXIT_BAD_ARGC, "wrong number of arguments");

	close(1);

	//  parse the pdf udig from argv[1]

	pdf_blob = argv[1];
	len = strlen(pdf_blob);
	if (len < 34 || len > 255 || strchr(pdf_blob, ':') == NULL)
		die2(EXIT_BAD_UDIG, "syntax error in pdf udig", pdf_blob);

	//  parse the pdf page number from argv[2]

	pn = argv[2];
	len = strlen(pn);
	if (len < 1 || len > 19)
		die2(EXIT_BAD_PAGEN, "page number not > 0 and < 20 chars", pn);

	//  need to validate that all chars are decimal digits

	page_number = atoi(pn);
	if (page_number <= 0)
		die2(EXIT_BAD_PAGEN, "atoi(page size) <= 0", pn);

	//  parse the page blob size as argv[3]

	sz = argv[3];
	len = strlen(sz);
	if (len < 1 || len > 19)
		die2(EXIT_BAD_SIZE, "blob page size not > 0 and < 20 chars",sz);

	//  need to validate that all chars are decimal digits

	stdin_size = atoi(sz);
	if (stdin_size <= 0)
		die2(EXIT_BAD_SIZE, "atoi(stdin page size) <= 0", sz);

	//  allocate the utf8 buffer plus null byte

	page_txt = malloc(stdin_size + 1);
	if (page_txt == NULL)
		die2(EXIT_BAD_MALLOC, "malloc(page text stdin) failed", sz);
	page_txt[stdin_size] = 0;

	_read_blob(0, page_txt, stdin_size);

	EXEC SQL WHENEVER SQLERROR CALL _ecpg_sql_error(
		(struct _ecpg_sql_state_fault *)0
	);
	EXEC SQL WHENEVER SQLWARNING CALL _ecpg_sql_warning(no_warns);
	EXEC SQL CONNECT TO default;

	/*
	 *  Merge blob into pdfbox2.page_text_utf8 table.
	 */
	EXEC SQL BEGIN TRANSACTION;
	EXEC SQL
	  INSERT INTO pdfbox2.page_text_utf8(
		pdf_blob,
		page_number,
		txt
	  ) VALUES (
		:pdf_blob::udig,
		:page_number,
		:page_txt
	  )
  	  ON CONFLICT
  		DO NOTHING
	;
	EXEC SQL END TRANSACTION;

	_exit(EXIT_OK);
}
