#!/usr/bin/env bash
#
#  Synopsis:
#	Merge fault for a flowd call
#  Usage:
#	merge-flowd_call_fault						\
#		pdfbox							\
#		merge_pddocument					\
#		sha:7763765cdcbf9cf3f86474556304b49b397b8b45		\
#		ERR							\
#		2
#		0
#		/dev/null
#		-
#  Environment:
#	BLOBIO_ALGORITHM
#  Exit Status:
#	0	fault merged into table setops.flowd_call_fault
#	1	unexpected error (no fault written)
#
PROG=$(basename $0)
PSQL='psql --no-psqlrc --quiet --no-readline'
export TMP_INPUT_PATH

leave()
{
	rm --force "$TMP_INPUT_PATH"
}

die()
{
	echo "ERROR: $@" >&2
	exit 1
}

test $# = 8 || die "wrong number of arguments: got $#, need 8"

SCHEMA_NAME=$1
COMMAND_NAME=$2
BLOB=$3
EXIT_CLASS=$4
EXIT_STATUS=$5
SIGNAL=$6
STDOUT_PATH=$7
STDERR_PATH=$8

test "$STDOUT_PATH" = '-' -a "$STDOUT_PATH" = '-'			&&
	die "both stdout and stderr path can not be - (stdin)"

trap leave EXIT

test -n "$BLOBIO_ALGORITHM" || die 'env not defined: BLOBIO_ALGORITHM'

#  eat either stdin "-" or a file path and return the udig
#  set TMP_INPUT_PATH so leave() can clean up

eat() {
	local WHAT=$1
	local SRC_PATH=$2

	#  slurp input from stdin or test for readable file
	case "$SRC_PATH" in
	-)
		TMP_INPUT_PATH=${TMPDIR:=/tmp}/$PROG-$WHAT-$$.blob
		#  slurp stdin for for stderr
		cat >$TMP_INPUT_PATH || die "cat >$WHAT failed: exit status=$?"
		SRC_PATH=$TMP_INPUT_PATH
		;;
	*)
		test -r $SRC_PATH || die "can not read input path: $WHAT"
		;;
	esac

	# get the udig of the input
	local UDIG=$BLOBIO_ALGORITHM:$(
		blobio eat --algorithm $BLOBIO_ALGORITHM --input-path $SRC_PATH
	)
	test $? = 0 || die "blobio eat $WHAT failed: exit status=$?"
	blobio put 							\
		--udig $UDIG						\
		--input-path $SRC_PATH					\
		--service $BLOBIO_SERVICE				||
		die "blobio put $WHAT failed: exit status=$?"

	echo $UDIG
}

STDOUT_BLOB=$(eat stdout $STDOUT_PATH)
STDERR_BLOB=$(eat stdout $STDERR_PATH)

$PSQL <<END || die "psql insert failed: exit status=$?"
INSERT INTO setops.flowd_call_fault(
	schema_name,
	command_name,
	blob,
	exit_class,
	exit_status,
	signal,
	stdout_blob,
	stderr_blob
  ) VALUES (
  	'$SCHEMA_NAME',
	'$COMMAND_NAME',
	'$BLOB',
	'$EXIT_CLASS',
	$EXIT_STATUS,
	$SIGNAL,
	'$STDOUT_BLOB',
	'$STDERR_BLOB'
  ) ON CONFLICT
  	DO NOTHING
;
END
