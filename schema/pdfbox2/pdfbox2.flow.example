#
#  Synopsis:
#	Populate a PostgreSQL schema with the facts extracted by Apache pdfbox2 
#  See:
#	schema.sql
#

boot
{
	brr_capacity = 16;
	flow_worker_count = 8;
	os_exec_worker_count = 4;
	os_exec_capacity = 4;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name = "sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 8;
}

tail brr
{
	path = "spool/prefixio.brr";
}

command brr_on_network
{
	path = "true";
}

call brr_on_network()
  when
  (
        (
		brr.verb == "put"
		or
		brr.verb == "get"
		or
		brr.verb == "eat"
		or
		brr.verb == "wrap"
		or
		brr.verb == "roll"
	)
	and
	brr.chat_history == "ok"
  ) or (
	brr.verb == "give"
	and
	brr.chat_history == "ok,ok"
  )
;

sql query in_service_table row
{
	statement = `

	SELECT EXISTS (
	  SELECT
	  	blob
	    FROM
	    	setspace.service
	    WHERE
	    	blob = $1::udig
	);
	`;

	result row is (
		answer bool
	);
}

query in_service_table(brr.udig)
  when
  	brr_on_network.exit_status == 0
;

sql query in_pddocument_table row
{
	statement = `

	SELECT
		EXISTS (
		  SELECT
		  	blob
		    FROM
		    	pdfbox2.pddocument
		    WHERE
		    	blob = $1::udig
		),
		(
		  SELECT
		  	exit_status = 0
		    FROM
		    	pdfbox2.pddocument
		    WHERE
		    	blob = $1::udig
		)
	;
	`;

	result row is (
		answer bool,
		is_pdf bool
	);

}

query in_pddocument_table(brr.udig)
  when
  	in_service_table.answer == true
;

sql query in_pddocument_pending_table row
{
	statement = `

	SELECT EXISTS (
	  SELECT
	  	blob
	    FROM
	    	pdfbox2.pddocument_pending
	    WHERE
		blob = $1::udig
	  )
	;
	`;

	result row is (
		answer bool
	);

}

query in_pddocument_pending_table(brr.udig)
  when
  	in_pddocument_table.answer == false
;

sql query merge_pddocument_pending row
{
	statement = `

	INSERT INTO
	  pdfbox2.pddocument_pending(
		blob
	  ) VALUES(
	  	$1::udig
 	  )  ON CONFLICT
	  	DO NOTHING
	  RETURNING
	  	true
	`;

	result row is (
		inserted bool
	);

}

query merge_pddocument_pending(brr.udig)
  when
  	in_pddocument_pending_table.answer == false
;

command merge_pddocument
{
	path = "sbin/merge-pddocument";
	exit_status is OK when in {0, 1};
}

call merge_pddocument(brr.udig)
  when
  	merge_pddocument_pending.inserted == true
;

command pddocument_exists
{
	path = "true";
}

call pddocument_exists(brr.udig)
  when
  	in_pddocument_table.is_pdf == true
  	or
  	merge_pddocument.exit_status == 0
;

sql query in_extract_pages_utf8_table row
{
	statement = `

	SELECT
		EXISTS (
		  SELECT
			blob
		  FROM
			pdfbox2.extract_pages_utf8
		  WHERE
			blob = $1::udig
		),
		(
		  SELECT
			exit_status = 0
		    FROM
			pdfbox2.extract_pages_utf8
		    WHERE
			blob = $1::udig
		)
	`;

	result row is (
		answer bool,
		extracted bool
	);
}

query in_extract_pages_utf8_table(brr.udig)
  when
	pddocument_exists.exit_status == 0
;

sql query in_extract_pages_utf8_pending_table row
{
	statement = `

	SELECT EXISTS (
	  SELECT
		blob
	    FROM
		pdfbox2.extract_pages_utf8_pending
	    WHERE
		blob = $1::udig
	  )
	;
	`;

	result row is (
		answer bool
	);

}

query in_extract_pages_utf8_pending_table(brr.udig)
  when
	in_extract_pages_utf8_table.answer == false
;

sql query merge_extract_pages_utf8_pending row
{
	statement = `

	INSERT INTO
	  pdfbox2.extract_pages_utf8_pending(
		blob
	  ) VALUES(
		$1::udig
	  )  ON CONFLICT
		DO NOTHING
	  RETURNING
		true
	`;

	result row is (
		inserted bool
	);

}

query merge_extract_pages_utf8_pending(brr.udig)
  when
	in_extract_pages_utf8_pending_table.answer == false
;

command merge_extract_pages_utf8
{
	path = "sbin/merge-extract_pages_utf8";
}

call merge_extract_pages_utf8(brr.udig)
  when
	merge_extract_pages_utf8_pending.inserted == true
;

sql exec delete_extract_pages_utf8_pending
{
	statement = `

	DELETE FROM pdfbox2.extract_pages_utf8_pending
	  WHERE
		blob = $1::udig
	`;
}

query delete_extract_pages_utf8_pending(brr.udig)
  when
	merge_extract_pages_utf8.exit_status == 0
;

sql query in_page_text_utf8_table row
{
	statement = `

	WITH page_counts AS (
	  SELECT
		e.pdf_blob,
		count(e.page_blob) AS extract_count,
		(SELECT
			count(*)
		  FROM
			pdfbox2.page_text_utf8 txt
		  WHERE
			txt.pdf_blob = $1::udig
		) AS text_count
	    FROM
		pdfbox2.extract_page_utf8 e
	    WHERE
		e.pdf_blob = $1::udig
	    GROUP BY
		e.pdf_blob
	)
	SELECT
		pc.extract_count != pc.text_count
		AND
		pend.blob is null
	  FROM
		page_counts pc
		  LEFT OUTER JOIN pdfbox2.page_text_utf8_pending pend ON (
			pend.blob = pc.pdf_blob
		)
	`;
	result row is (
		missing_pages bool
	);
}

query in_page_text_utf8_table(brr.udig)
  when
  	delete_extract_pages_utf8_pending.rows_affected == 1
	or
	in_extract_pages_utf8_table.answer == true
;

command merge_pages_text_utf8
{
	path = "sbin/merge-pages_text_utf8";
}

call merge_pages_text_utf8(brr.udig)
  when
  	in_page_text_utf8_table.missing_pages == true
;
