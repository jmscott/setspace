#!/bin/bash
#
#  Synopsis:
#	Extract the PDDocument scalars from PDF and store in json blob&pgdb.
#  Usage:
#	json-pddocument2pg <udig>
#  Exit Status:
#	0	ok, extracted pddocument info and stored json blob
#	1	pdf load failed
#	2	blob does not exist
#	3	wrong number of arguments
#	4	blobio error
#	5	java putPDDocument failed
#	6	save json error
#	7	pg database error
#  Environment:
#	BLOBIO_ALGORITHM=${BLOBIO_ALGORITHM:=sha}
#	BLOBIO_SERVICE=${BLOBIO_SERVICE:=localhost:1797}
#

PROG=json-pddocument
TMP_BLOB=${TMP_DIR:=/tmp}/$PROG-$$.pdf
TMP_ERR=${TMP_DIR:=/tmp}/$PROG-$$.err
TMP_ROW=${TMP_DIR:=/tmp}/$PROG-$$.row
TMP_JSON=${TMP_DIR:=/tmp}/$PROG-$$.json

leave()
{
	rm -f $TMP_BLOB $TMP_ERR $TMP_ROW $TMP_JSON
}
trap leave EXIT

die()
{
	STATUS=$2
	echo "$PROG: ERROR: $1" >&2
	exit $STATUS
}

test $# = 1 || die 'wrong number of arguments' 3
UDIG=$1

#  fetch the pdf blob

blobio get --udig $UDIG --output-path $TMP_BLOB --service $BLOBIO_SERVICE
STATUS=$?
case $STATUS in
0)
	;;
1)
	exit 2
	;;
*)
	die 'blobio get failed' 4
	;;
esac

#  execute the java extract.  we expect only 0 and no stderr.

java -cp $CLASSPATH putPDDocument <$TMP_BLOB >$TMP_ROW 2>$TMP_ERR
EXIT_STATUS=$?
case $EXIT_STATUS in
0)
	#  pdf loaded and scalars extracted
	read								\
		NUMBER_OF_PAGES						\
		DOCUMENT_ID						\
		VERSION							\
		IS_ALL_SECURITY_TO_BE_REMOVED				\
		IS_ENCRYPTED						\
	<$TMP_ROW
	;;
1)
	#  pdf load failed.

	NUMBER_OF_PAGES=null
	DOCUMENT_ID=null
	VERSION=null
	IS_ALL_SECURITY_TO_BE_REMOVED=null
	IS_ENCRYPTED=null
	;;
*)
	test -s $TMP_ERR && echo "$PROG: ERROR: java stderr: $(cat $TMP_ERR)">&2
	die "java putPDDocument failed: exit status=$EXIT_STATUS" 5
	;;
esac

#  creatw a json record the results of running pddocument
cat >$TMP_JSON <<END || die "cat >json failed: exit status: $?" 6
{
	"pdfbox2.setspace.com": {
		"putPDDocument": {
			"blob":			"$UDIG",
			"exit_status":		$EXIT_STATUS,
			"number_of_pages":	$NUMBER_OF_PAGES,
			"version":		$VERSION,
			"is_all_security_to_be_removed":
						$IS_ALL_SECURITY_TO_BE_REMOVED,
			"is_encrypted":		$IS_ENCRYPTED
		},
		"date":		"$(date)",
		"hostname":	"$(hostname)",
		"USER":		"$USER"
	}
}
END

D=$(blobio eat --algorithm $BLOBIO_ALGORITHM --input-path $TMP_JSON)
test $? = 0 || die "blobio eat failed: exit status=$?" 4
blobio put 								\
	--udig $BLOBIO_ALGORITHM:$D					\
	--input-path $TMP_JSON						\
	--service $BLOBIO_SERVICE
test $? = 0 || die "blobio put failed: exit status=$?" 4

psql -e --no-psqlrc --quiet <<END || die "psql insert/merge failed: exit status=$?" 7

\\set ON_ERROR_STOP on

INSERT INTO
  pdfbox2.pddocument(
  	blob,
	exit_status,
	number_of_pages,
	version,
	is_all_security_to_be_removed,
	is_encrypted
    ) VALUES (
    	'$UDIG',
	$EXIT_STATUS,
	$NUMBER_OF_PAGES,
	$VERSION,
	$IS_ALL_SECURITY_TO_BE_REMOVED,
	$IS_ENCRYPTED

    ) ON CONFLICT
    	DO NOTHING
;
DELETE FROM pdfbox2.pddocument_pending
  WHERE
  	blob = '$UDIG'
;
END

exit 0
