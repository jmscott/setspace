#
#  Synopsis:
#	Populate the PostgreSQL schema defined in schema.sql
#  See:
#	schema.sql
#  Note:
#	Not handling flap of "no" -> "ok" correctly!
#	the sync map ought to be cleared when blob does not exists AND
#	is not in service!
#
#	Investigate if the first two characters of a json document are
#	always ascii:
#
#		http://www.ietf.org/rfc/rfc4627.txt
#
#	Is the same true for the last two chars?
#

boot
{
	brr_capacity = 256;
	flow_worker_count = 16;
	os_exec_worker_count = 12;
	os_exec_capacity = 12;

	xdr_roll_duration = "168h";
	fdr_roll_duration = "168h";
	qdr_roll_duration = "168h";

	heartbeat_duration = "1m";
}

sync map first_blob[string]bool;

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"search_path=jsonorg,setspace  fallback_application_name=jsonorg.flow sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 8;
}

tail brr
{
	path = "spool/prefixio.brr";
}

sql query blob_state row
{
	result row is (
		in_blob bool,
		in_checker_255 bool,
		is_json bool,
		in_jsonb_255 bool
	);
	statement = `
	SELECT
		EXISTS (
		  SELECT
			true
		    FROM
			blob b
		    WHERE
			b.blob = $1::udig
		),
		EXISTS (
		  SELECT
			true
		    FROM
			checker_255
		    WHERE
			blob = $1::udig
		),

		--  flowd does not support null, so consult existence first

		COALESCE((SELECT
			is_json
		    FROM
			checker_255
		    WHERE
			blob = $1::udig
		), false),

		EXISTS (
		  SELECT
			true
		    FROM
			jsonb_255
		    WHERE
			blob = $1::udig
		  )
	;`;
}

command first_seen
{
	path = "true";
	exit_status is OK when in {0, 1};
}

call first_seen()
  when
	first_blob.LoadOrStore(brr.udig, true).loaded == false
;

query blob_state(brr.udig)
  when
  	first_seen.exit_status == 0
;

command blob_exists
{
	path = "blobio";
	argv = (
		"eat",
		"--service",
		"fs:${BLOBIO_ROOT}",
		"--udig"
	);
	exit_status is OK when in {
		0,	#  blob exists
		1	#  blobio does not exists
	};
}

call blob_exists(brr.udig)
  when
  	blob_state.in_blob == false
	or
  	blob_state.in_checker_255 == false
	or
  	blob_state.in_jsonb_255 == false
;

sql exec upsert_blob
{
	statement = `
	INSERT INTO blob(
		blob,
		discover_time
	  ) VALUES (
	  	$1::udig,
		$2::inception
	  ) ON CONFLICT(blob) DO UPDATE SET
	    	discover_time = $2::inception
	    WHERE
	    	EXCLUDED.discover_time < blob.discover_time
	`;
}

query upsert_blob(brr.udig, brr.start_time)
  when
  	blob_exists.exit_status == 0
	and
	blob_state.in_blob == false
;

command get_JSON_checker
{
	path = "sbin/get-JSON_checker";
	exit_status is OK when in {
		0,			#  is valid JSON
		1			#  is not valid json
	};
}

call get_JSON_checker(brr.udig)
  when
  	blob_state.in_checker_255 == false
	and
	blob_exists.exit_status == 0
;

sql exec upsert_checker_255
{
	statement = `
	INSERT INTO checker_255 (
		blob,
		is_json
	  ) VALUES(
	  	$1::udig,
		$2::int = 0 
	  ) ON CONFLICT
	  	DO NOTHING
	`;
}

query upsert_checker_255(brr.udig, get_JSON_checker.exit_status)
  when
  	get_JSON_checker.exit_status == 0
	or
	get_JSON_checker.exit_status == 1
;

command upsert_jsonb_255
{
	path = "sbin/upsert-jsonb_255";
	exit_status is OK when in {
		0,			#  upserted
		1			#  blob no exist
	};
}

call upsert_jsonb_255(brr.udig)
  when
  	upsert_checker_255.sqlstate == "00000"
	or
	(
		blob_state.in_jsonb_255 == false
		and
		blob_state.in_checker_255 == true
	)
;


sql exec upsert_jsonb_255_fault
{
       statement = `
       INSERT INTO setops.flowd_call_fault(
               schema_name,
               command_name,
               blob,
               exit_class,
               exit_status,
               signal
         ) VALUES (
               'jsonorg',
               'upsert_jsonb_255',
               $1::udig,
               'ERR',
               $2::smallint,
               0
         ) ON CONFLICT DO NOTHING
       ;`;
}

query upsert_jsonb_255_fault(brr.udig, upsert_jsonb_255.exit_status)
  when
       upsert_jsonb_255.exit_status != 0
       and
       upsert_jsonb_255.exit_status != 1
;
