#
#  Synopsis:
#	Populate a PostgreSQL schema with text searchable blobs
#  See:
#	schema.sql
#  Note:
#	Entries in table merge_tsv_utf8_pending are not removed upon error.
#

boot
{
	brr_capacity = 16;
	flow_worker_count = 8;
	os_exec_worker_count = 4;
	os_exec_capacity = 4;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"fallback_application_name=pgtexts.flow sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 8;
}

tail brr
{
	path = "spool/pdfbox.brr";
}

command brr_has_size
{
	path = "true";
}

call brr_has_size()
  when
  (
        (
		brr.verb == "put"
		or
		brr.verb == "get"
	)
	and
	brr.chat_history == "ok"
  ) or (
	brr.verb == "give"
	and
	brr.chat_history == "ok,ok"
  )
;

sql query in_service_table row
{
	statement = `

	SELECT EXISTS (
	  SELECT
	  	blob
	    FROM
	    	setcore.service
	    WHERE
	    	blob = $1::udig
	);
	`;

	result row is (
		answer bool
	);

}

query in_service_table(brr.udig)
  when
  	brr_has_size.exit_status == 0
;

sql query in_tsv_utf8_table row
{
	statement = `

	SELECT EXISTS (
	  SELECT
	  	blob
	    FROM
	    	pgtexts.tsv_utf8
	    WHERE
	    	blob = $1::udig
	);
	`;

	result row is (
		answer bool
	);

}

query in_tsv_utf8_table(brr.udig)
  when
  	in_service_table.answer == true
;

sql query in_merge_tsv_utf8_pending_table row
{
	statement = `

	SELECT EXISTS (
	  SELECT
	  	blob
	    FROM
	    	pgtexts.merge_tsv_utf8_pending
	    WHERE
		blob = $1::udig
	  )
	;
	`;

	result row is (
		answer bool
	);

}

query in_merge_tsv_utf8_pending_table(brr.udig)
  when
  	in_tsv_utf8_table.answer == false
;

sql query merge_tsv_utf8_pending row
{
	statement = `

	INSERT INTO
	  pgtexts.merge_tsv_utf8_pending(
		blob
	  ) VALUES(
	  	$1::udig
 	  )  ON CONFLICT
	  	DO NOTHING
	  RETURNING
	  	true
	`;

	result row is (
		inserted bool
	);
}

query merge_tsv_utf8_pending(brr.udig)
  when
  	in_merge_tsv_utf8_pending_table.answer == false
;

command merge_tsv_utf8
{
	path = "sbin/merge-tsv_utf8";
	argv = (
		"english"
	);
	exit_status is OK when in {0, 1};
}

call merge_tsv_utf8(brr.udig, brr.blob_size)
  when
  	merge_tsv_utf8_pending.inserted == true
;

sql exec delete_tsv_utf8_pending
{
	statement = `

	DELETE FROM pgtexts.merge_tsv_utf8_pending
	  WHERE
	  	blob = $1::udig
	;
	`;
}

query delete_tsv_utf8_pending(brr.udig)
  when
  	merge_tsv_utf8.exit_status == 0
	or
	merge_tsv_utf8.exit_status == 1
;

#  text tables

sql query in_text_utf8_table row
{
	statement = `

	SELECT EXISTS (
	  SELECT
	  	blob
	    FROM
	    	pgtexts.text_utf8
	    WHERE
	    	blob = $1::udig
	);
	`;

	result row is (
		answer bool
	);

}

query in_text_utf8_table(brr.udig)
  when
  	in_service_table.answer == true
;

sql query in_merge_text_utf8_pending_table row
{
	statement = `

	SELECT EXISTS (
	  SELECT
	  	blob
	    FROM
	    	pgtexts.merge_text_utf8_pending
	    WHERE
		blob = $1::udig
	  )
	;
	`;

	result row is (
		answer bool
	);

}

query in_merge_text_utf8_pending_table(brr.udig)
  when
  	in_text_utf8_table.answer == false
;

sql query merge_text_utf8_pending row
{
	statement = `

	INSERT INTO
	  pgtexts.merge_text_utf8_pending(
		blob
	  ) VALUES(
	  	$1::udig
 	  )  ON CONFLICT
	  	DO NOTHING
	  RETURNING
	  	true
	`;

	result row is (
		inserted bool
	);
}

query merge_text_utf8_pending(brr.udig)
  when
  	in_merge_text_utf8_pending_table.answer == false
;

command merge_text_utf8
{
	path = "sbin/merge-text_utf8";
	exit_status is OK when in {0, 1};
}

call merge_text_utf8(brr.udig, brr.blob_size)
  when
  	merge_text_utf8_pending.inserted == true
;

sql exec delete_text_utf8_pending
{
	statement = `

	DELETE FROM pgtexts.merge_text_utf8_pending
	  WHERE
	  	blob = $1::udig
	;
	`;
}

query delete_text_utf8_pending(brr.udig)
  when
  	merge_text_utf8.exit_status == 0
	or
	merge_text_utf8.exit_status == 1
;
