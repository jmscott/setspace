#
#  Synopsis:
#	Standalone config that merges json blobs into tables in schema.sl
#  Blame:
#  	jmscott@setspace.com
#  	setspace@gmail.com
#
tail biod
{
	path = "schema/blobio/spool/biod.brr";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name = "sslmode=disable";
	max_idle_conns = 1;
	max_open_conns = 32;
}

############# BEGIN CUT HERE - SECTION FOR setspace SCHEMA.  

sql query blob_exists row
{
	database is setspace;

	result row is (
		answer bool
	);

	statement = `

	select exists (
		select
			id
		  from
			setspace.blob
		  where
			id = $1::udig
	)`;
}

sql exec merge_blob
{
	database is setspace;

	statement = (
	`lock table setspace.blob in share row exclusive mode;`,

	`insert into setspace.blob(id)
	  select
		$1::udig
	  where
	  	not exists (
		  select
			id
		    from
			setspace.blob
		    where
			id = $1::udig
		)
	;`);
}

command brr_exists
{
	path = "true";
}

call brr_exists()
  when
	  (
		(
			biod.verb == "put"
			or
			biod.verb == "get"
			or
			biod.verb == "eat"
			or
			biod.verb == "wrap"
			or
			biod.verb == "roll"
		)
		and
		biod.chat_history == "ok"
	  ) or (
		biod.verb == "give"
		and
		(
			biod.chat_history == "ok,ok"
			or
			biod.chat_history == "ok"
		)
	  )
;

query blob_exists(biod.udig)
  when
  	brr_exists.exit_status == 0
;

query merge_blob(biod.udig)
  when
  	blob_exists.answer == false
;

############# END CUT HERE - SECTION FOR setspace SCHEMA.  

#
#  Does a tuple exist in the table json.Checker_255?
#
sql query JSON_Checker_exists row
{
	statement = `

	select exists (
	  select
	  	blob
	    from
	    	json.Checker_255
	    where
	    	blob = $1::udig
	)`;

	result row is (
		answer bool
	);
	database is setspace;
}

command is_json
{
	path = "sbin/JSON_checker.sh";
	exit_status is OK when in {
		0,		#  passed json syntax test, max depth 255
		1		#  failed json syntax test
	};
}
