#
#  Synopsis:
#	Merge blobs into tables in schema mydash, like tagged urls.
#  Usage:
#  	flowd server mydash.conf
#  See:
#  	mydash/lib/schema.sql
#  Note:
#	Need a better method for cleanup than waiting on all possible
#	combinations of exit status.  at the very least a compact,
#	vectorized version would be better than simple minded, error prone
#	enumeration.
#

boot
{
	brr_capacity = 256;
	flow_worker_count = 4;

	#
	#  No processes are invoked
	#
	#  Note:
	#	Since no workers can we set to 0?
	#
	os_exec_worker_count = 1;
	os_exec_capacity = 1;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"fallback_application_name=mydash.flow sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 4;
}

tail brr
{
	path = "spool/jsonio.brr";
}

#
#  Is the blob a request to tag a url and does it already exist
#  in the database.
#
#	"mydash.schema.setspace.com": {
#		"tag-http": {}
#	}
#

sql query is_tag_http_json row
{
	statement = `
SELECT
	EXISTS (
	  SELECT
		blob
	    FROM
		jsonorg.jsonb_255
	    WHERE
		doc @> '{
			"mydash.schema.setspace.com":{
				"tag-http":{}
			}
		}'
		AND
		blob = $1::udig
	),
	EXISTS (
	  SELECT
	  	blob
	    FROM
	    	mydash.tag_http
	    WHERE
	    	blob = $1::udig
	) AND EXISTS ( 
	  --  Note: what about blob with no title?
	  SELECT
	  	blob
	    FROM
	    	mydash.tag_http_title
	    WHERE
	    	blob = $1::udig
	) AND EXISTS (
	  SELECT
	  	blob
	    FROM
	    	mydash.tag_http_title_tsv
	    WHERE
	    	blob = $1::udig
		AND
		ts_conf = 'english'::regconfig
	) AND  EXISTS (
	  SELECT
	  	blob
	    FROM
	    	mydash.tag_http_host
	    WHERE
	    	blob = $1::udig
	)
;
	;`;

	result row is (
		is_tag_http bool,
		tag_http_exists bool
	);
}

query is_tag_http_json(brr.udig);

#
#  Extract and merge fields from json object
#
#	"mydash.schema.setspace.com": {
#		"tag-http":{
#			"url":
#			"title":
#			"discover-unix-epoch"
#		}
#
#  into the tables tag_http, tag_http_title, tag_http_title_tsv,
#  tag_http_host.
#
#  We can not update tag_http_title_tsv in a trigger, as is typical,
#  since the trigger has no idea of the ts_conf object.
#
sql exec merge_tag_http
{
	statement = `
WITH request(url, title, discover_time) AS (
  /*
   *  Extract all the fields from the json object.
   */
  SELECT
	doc->'mydash.schema.setspace.com'->'tag-http'->>'url',
	doc->'mydash.schema.setspace.com'->'tag-http'->>'title',
	timestamptz 'epoch' + (
		doc
			->'mydash.schema.setspace.com'
			->'tag-http'
			->'discover-unix-epoch'
		)::bigint * interval '1 second'
    FROM
  	jsonorg.jsonb_255
    WHERE
  	doc @> '{
		"mydash.schema.setspace.com":{
			"tag-http":{}
		}
	}'
	AND
	blob = $1::udig
), insert_tag_http (blob) AS (

  INSERT INTO mydash.tag_http (
  	blob,
	url,
	discover_time
  ) SELECT
  	$1::udig,
	url,
	discover_time
      FROM
      	request
      ON CONFLICT
      	DO NOTHING
      RETURNING
      	blob
), insert_tag_http_title AS (
  INSERT INTO mydash.tag_http_title (
  	blob,
	title
  ) SELECT
  	$1,
	title
      FROM
      	request
      WHERE
        --  insure insert_tag_http has completed
      	(SELECT
		count(*)
	    FROM
	    	insert_tag_http
	) IS NOT NULL
   ON CONFLICT
   	DO NOTHING
   RETURNING
   	blob
), insert_tag_http_title_tsv_english AS (

  /*
   *  Note:
   *	Sadly, a trigger can not know the english ts_config,
   *	hence we excplitly do the insert of the ts vector
   */
  INSERT INTO mydash.tag_http_title_tsv (
  	blob,
	ts_conf,
	tsv
  ) SELECT
  	$1,
	'english'::regconfig,
	to_tsvector('english'::regconfig, title)
      FROM
      	request
      WHERE
        --  insure insert_tag_http_title has been merged
      	(SELECT
		count(*)
	   FROM
	    	insert_tag_http_title
	) IS NOT NULL
  ON CONFLICT
  	DO NOTHING
  RETURNING
      	true
) INSERT INTO mydash.tag_http_host (blob, host)
    SELECT
    	$1::udig,
  	regexp_replace(regexp_replace(url, '^[^:]+://', ''), '/.*', '')
    FROM
    	request
    WHERE
        --  insure all table have been merged
      	(SELECT
		count(*)
	   FROM
	    	insert_tag_http,
		insert_tag_http_title,
		insert_tag_http_title_tsv_english
	) IS NOT NULL
    ON CONFLICT
    	DO NOTHING
    RETURNING
    	true
;
	`;
}

query merge_tag_http(brr.udig)
  when
  	is_tag_http_json.is_tag_http == true
	and
	is_tag_http_json.tag_http_exists == false
;
