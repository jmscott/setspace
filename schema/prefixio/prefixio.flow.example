#
#  Synopsis:
#	Route blobs into other schemas based upon patterns in the byte prefix.
#  Description:
#	Blob may be routed to other schemas based upon values in the the
#	first 32 bytes of of the blob.  See the table setcore.byte_prefix_32
#	and setcore.byte_suffix_32.  Recipes may also assume that the core
#	byte oriented setcore tables have already been populated:
#
#		setcore.{byte_bitmap, byte_count, is_utf8}
#  Usage:
#  	flowd server prefixio.conf
#  Note:
#	Appears that PDF files begin with new-line before the
#	prefix %PDF are parsable. For example, see blob
#
#		bc160:e294cd8ae0247bcb7f7c7ad43570c9213e7b0dd0
#
#	Can we set os_exec_worker_count == 0?
#
#	Only need to append requests that proof existence.
#

boot
{
	brr_capacity = 256;
	flow_worker_count = 32;

	os_exec_worker_count = 16;
	os_exec_capacity = 64;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"fallback_application_name=prefixio.flow sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 16;
}

tail brr
{
	path = "spool/setcore.brr";
}

#
#  Is the utf8 blob framed with json object or array chars?
#
#  Note:
#	We only consult 32 bytes of prefix and suffix of the blob.
#	This implies we will miss json blobs with long leading chunks of
#	white space.
#
#	Also, SQL does not insure that the bytea cast to text will
#	never be executed for non-utf8.
#

sql query may_be_json_object_or_array row
{
	statement = `
SELECT EXISTS (
  WITH utf8wf AS (
    SELECT
  	blob
      FROM
    	setcore.is_utf8wf
      WHERE
	is_utf8 IS TRUE
	AND
	blob = $1::udig
  )
  SELECT
	u8.blob
    FROM
  	utf8wf u8
	  JOIN setcore.byte_prefix_32 p32 ON (p32.blob = u8.blob)
	  JOIN setcore.byte_suffix_32 s32 ON (s32.blob = u8.blob)
    WHERE
    	/*
	 *  Consult the hex versions of the prefix/suffix, since
	 *  we may have malformed utf8 due to truncating at 32 bytes.
	 */
	((	--  utf8 framed with {}

		p32.prefix::text ~ '^\\x(09|0a|20|0d)*7b'
		AND
		s32.suffix::text ~ '^\\x.*7d(09|0a|20|0d)*$'
	)
	OR
	(	--  utf8 framed with []

		p32.prefix::text ~ '^\\x(09|0a|20|0d)*5b'
		AND
		s32.suffix::text ~ '^\\x.*5d(09|0a|20|0d)*$'
	))
);
	`;

	result row is (
		answer bool
	);
}

query may_be_json_object_or_array(brr.udig);

command append_jsonorg_brr
{
	path = "append-brr";
	argv = (
		"../jsonorg/spool/prefixio.brr"
	);
}

call append_jsonorg_brr(
	brr.start_time,
	brr.transport,
	brr.verb,
	brr.udig,
	brr.chat_history,
	brr.blob_size,
	brr.wall_duration
) when
	may_be_json_object_or_array.answer == true
;

command append_pdfbox_brr
{
	path = "append-brr";
	argv = (
		"../pdfbox/spool/prefixio.brr"
	);
}

#
#  The prefix of blob matches '^%PDF-'
#
#  Note:
#	Appears that PDF files begin with new-line before the
#	prefix %PDF are parsable. For example, see blob
#
#		bc160:e294cd8ae0247bcb7f7c7ad43570c9213e7b0dd0
#
sql query prefix_is_percentPDF row
{
	statement = `

	SELECT
		--  match up to 27 leading white space chars and %PDF-
		prefix::text ~ '^\\x((0a)|(0d)|(09)|(20)|(0b))*255044462d'
	  FROM
	  	setcore.byte_prefix_32
	  WHERE
	  	blob = $1::udig
	`;

	result row is (
		answer bool
	);
}

query prefix_is_percentPDF(brr.udig);

call append_pdfbox_brr(
	brr.start_time,
	brr.transport,
	brr.verb,
	brr.udig,
	brr.chat_history,
	brr.blob_size,
	brr.wall_duration
) when
	prefix_is_percentPDF.answer == true
;

#
#  If the UTF8 blob has char '<' as first char and '>' as last then route to
#  expat2 schema.
#
#  Note:
#	We only consult 32 bytes of prefix and suffix of the blob.
#	This implies we will miss xml blobs with long leading chunks of
#	white space.
#
#	Also, SQL does not insure that the bytea cast to text will
#	never be executed for non-utf8.
#

sql query may_be_xml row
{
	statement = `
SELECT EXISTS (
  WITH utf8wf AS (
    SELECT
  	blob
      FROM
    	setcore.is_utf8wf
      WHERE
	is_utf8 IS TRUE
	AND
	blob = $1::udig
  )
  SELECT
	u8.blob
    FROM
  	utf8wf u8
	  JOIN setcore.byte_prefix_32 p32 ON (p32.blob = u8.blob)
	  JOIN setcore.byte_suffix_32 s32 ON (s32.blob = u8.blob)
    WHERE
    	/*
	 *  Consult the hex versions of the prefix/suffix, since
	 *  we may have malformed utf8 due to truncating at 32 bytes.
	 */
	(	--  utf8 framed with < ... >

		p32.prefix::text ~ '^\\x(09|0a|20|0d)*3c'
		AND
		s32.suffix::text ~ '^\\x.*3e(09|0a|20|0d)*$'
	)
);
	`;

	result row is (
		answer bool
	);
}
