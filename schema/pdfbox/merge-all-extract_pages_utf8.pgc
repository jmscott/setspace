/*
 *  Synopsis:
 *  	Merge pages in directory into extract_pages_utf8, page_{text,tsv}_utf8.
 *  Usage:
 *	merge-all-extract_pages_utf8 <udig> <ts_conf>
 *  Arguments:
 *  	1	udig of the pdf blob
 *	2	tsv vector configuration
 *  Exit Status:
 *  	0	ok, all pages were merged
 *  	1	program invocation error
 *  	2	malloc() failed
 *	3	error reading from file system
 *	4	sql error
 *	5	sql warning
 */

static char progname[] = "merge-all-extract_pages_utf8";

#define EXIT_OK		0
#define EXIT_BAD_INVO	1
#define EXIT_BAD_MALLOC 2

//  map all i/o errors onto error code 3

#define EXIT_BAD_OPEN	3
#define EXIT_BAD_READ	3
#define EXIT_BLOB_SMALL	3
#define EXIT_BLOB_BIG	3
#define EXIT_BAD_STAT	3
#define EXIT_BAD_CLOSE	3
#define EXIT_BAD_SLURP	3

#define EXIT_SQLERROR	4
#define EXIT_SQLWARN	5

#define COMMON_NEED_FILE_EXISTS
#define COMMON_NEED_SLURP
#define COMMON_NEED_IS_UDIG
#include "../../common.c"

#define COMMON_ECPG_NEED_SQL_WARNING
#define COMMON_ECPG_NEED_SQL_ERROR
#include "../../common-ecpg.c"

//  ignore these sql warnings

static struct _ecpg_sql_state_fault no_warns[] =
{
	{"02000", -1},	//  no data found due to upsert conflict 
	{(char *)0, -1}
};

int
main(int argc, char **argv)
{
EXEC SQL BEGIN DECLARE SECTION;
	char *pdf_blob;
	char *txt = 0;
	long txt_size = 0;
	char *ts_conf;
	char *page_udig = 0;
	long page_udig_size = 0;
	int page_number;
EXEC SQL END DECLARE SECTION;

	if (argc != 3)
		die(EXIT_BAD_INVO, "wrong number of arguments");

	close(1);

	//  frisk the pdf udig from argv[1]

	pdf_blob = argv[1];
	if (!_is_udig(pdf_blob))
		die2(EXIT_BAD_INVO, "syntax error in pdf udig", pdf_blob);

	// the configuration for the text search vector

	ts_conf = argv[2];
	if (!ts_conf[0])
		die(EXIT_BAD_INVO, "zero length text search config");

	EXEC SQL WHENEVER SQLERROR CALL _ecpg_sql_error(
		(struct _ecpg_sql_state_fault *)0
	);
	EXEC SQL WHENEVER SQLWARNING CALL _ecpg_sql_warning(no_warns);
	EXEC SQL CONNECT TO default;

	/*
	 *  Merge blob into pdfbox.page_text_utf8 table.
	 */
	EXEC SQL BEGIN TRANSACTION;
	for (page_number = 1;  page_number < 2603538;  page_number++) {
		char path[13];
		int nread;

		//  read the page txt into memory from, say, 0000009.txt

		snprintf(path, sizeof path, "%07d.txt", page_number);
		if (!_file_exists(path))
			break;
		nread = _slurp(path, (void **)&txt, &txt_size);
		txt[nread] = 0;

		//  read udig of the text page from, say,  0000009.udig 

		snprintf(path, sizeof path, "%07d.udig", page_number);
		nread = _slurp(path, (void **)&page_udig, &page_udig_size);
		page_udig[nread - 1] = 0;	//  terminate at new line
		if (!_is_udig(page_udig))
			die(EXIT_BAD_READ, "bad page text udig");

		EXEC SQL INSERT INTO pdfbox.extract_pages_utf8(
			pdf_blob,
			page_blob,
			page_number
		  ) VALUES (
			:pdf_blob::udig,
			:page_udig,
			:page_number
		  ) ON CONFLICT
			DO NOTHING
		;

		EXEC SQL INSERT INTO pdfbox.page_text_utf8(
			pdf_blob,
			page_number,
			txt
	  	  ) VALUES (
			:pdf_blob::udig,
			:page_number,
			:txt
	  	  ) ON CONFLICT
  			DO NOTHING
		;

		EXEC SQL INSERT INTO pdfbox.page_tsv_utf8(
			pdf_blob,
			page_number,
			ts_conf,
			tsv
		  ) VALUES (
			:pdf_blob::udig,
			:page_number,
			:ts_conf::regconfig,
			to_tsvector(:ts_conf::regconfig, :txt)
	  	  ) ON CONFLICT
			DO NOTHING
		;
	}
	EXEC SQL END TRANSACTION;

	_exit(EXIT_OK);
}
