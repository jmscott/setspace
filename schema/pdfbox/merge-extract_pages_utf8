#!/bin/bash
#
#  Synopsis:
#	Extract all pages from pdf and merge into tables extract_page_utf8.
#  Usage:
#	merge-extract_pages_utf8 <pdf blob>
#  Exit Status
#	0	pages merged ok
#	1	pdf blob not found
#	2	program invocation or setup error
#	3	unexpected blobio error
#	4	java ExtractPagesUTF8.class failed
#	5	sql error
#  Environment:
#	BLOBIO_SERVICE
#	BLOBIO_GET_SERVICE
#	TMPDIR
#  Note:
#	Upon error page blobs may be orphaned.
#	Interesting problem.  Since blobio has no notion of a link count,
#	difficult to simply remove the blob upon error, since another data
#	structure may be dependent the blob.
#

PROG=merge-extract_pages_utf8
BLOBIO_GET_SERVICE=${BLOBIO_GET_SERVICE:=$BLOBIO_SERVICE}
WORK_DIR=${TMPDIR:=/tmp}/$PROG.$$.d
BLOBIO_GET_SERVICE=${BLOBIO_GET_SERVICE:=$BLOBIO_SERVICE}
PSQL='psql --quiet --no-psqlrc'

die()
{
	STATUS=$2
	echo "$PROG: ERROR: $1" >&2
	exit $STATUS
}

leave()
{
	STATUS=$?
	cd .. && rm -rf $WORK_DIR
	exit $STATUS
}

trap leave EXIT

test $# = 1 || die "wrong number of arguments: got $#, expected 1" 2
PDF_UDIG=$1

mkdir -p $WORK_DIR || die "mkdir work $WORK_DIR failed: exit status=$?" 3
cd $WORK_DIR || die "cd work $WORK_DIR failed: exit status=$?" 3

#  fetch the pdf blob into work directory

PDF=$PDF_UDIG.pdf
blobio get --udig $PDF_UDIG --output-path $PDF --service $BLOBIO_GET_SERVICE
STATUS=$?

case $STATUS in
0)
	;;
1)
	exit 1
	;;
*)
	die "blobio get failed: exit status=$?" 4
	;;
esac

#  extract individual pages into files 0000001.txt ... 0<number-pages>.txt

java 									\
	-server								\
	-cp $CLASSPATH							\
	ExtractPagesUTF8						\
	<$PDF 2>STDERR
EXIT_STATUS=$?
test -e $STDERR || die "java write to stderr failed" 6
cat STDERR >&2

#  log the fault of the java invocation, including stderr.
if [ $EXIT_STATUS != 0 ];  then
	if [ -s $STDERR ];  then
		STDERR_UDIG=$ALGORITHM:$(
			blobio eat					\
				--algorithm $ALGORITHM			\
				--input-path $STDERR
		)
		blobio put						\
			--udig $STDERR_UDIG				\
			--input-path $STDERR				\
			--service $BLOBIO_SERVICE			||
			die "blobio put stderr failed: exit status=$?" 5
	else
		STDERR_UDIG=$ALGORITHM:$(blobio empty --algorithm $ALGORITHM)
	fi
	$PSQL <<END || die "psql insert fault failed: exit status=$?" 5
INSERT INTO pdfbox.fault_extract_pages_utf8 (
	blob,
	exit_status,
	stderr_blob
) VALUES (
	'$UDIG',
	$EXIT_STATUS,
	'$STDERR_UDIG'
  ) ON CONFLICT
  	DO NOTHING
;
END
	die "java ExtractPagesUTF8 failed: exit status=$EXIT_STATUS" 4
fi

#  build the sql merge statements

cat >merge.sql <<END || die "cat sql extract failed: exit status=$?" 2
\\set ON_ERROR_STOP 1
BEGIN;
END

#
#  Put the individual page blobs and build the sql script.
#
#  Note:
#	Upon error the page blobs might become orphaned.
#

PAGE_NUMBER=0
find . -name '*.txt' -print | sort | while read TXT;  do
	PAGE_BLOB=$BLOBIO_ALGORITHM:$(
		blobio eat --algorithm $BLOBIO_ALGORITHM --input-path $TXT
	)
	STATUS=$?
	test $STATUS = 0 || die "blobio eat txt failed: exit status=$STATUS" 3

	blobio put							\
		--input-path $TXT					\
		--udig $PAGE_BLOB					\
		--service $BLOBIO_SERVICE
	STATUS=$?
	test $STATUS = 0 || die "blobio put txt failed: exit status=$STATUS" 3

	PAGE_NUMBER=$(expr $PAGE_NUMBER + 1)
	cat >>merge.sql <<END || die "cat sql txt failed: exit status=$?" 2
INSERT INTO pdfbox.extract_pages_utf8 (
	pdf_blob,
	page_blob,
	page_number
) VALUES (
	'$PDF_UDIG',
	'$PAGE_BLOB',
	$PAGE_NUMBER
  ) ON CONFLICT
	DO NOTHING
;
END
test $? || die "find/merge txt failed" 6
done

cat >>merge.sql <<END || die "cat sql commit failed: exit status=$?" 2
COMMIT;
END

#  merge pdf blob and individual pages

$PSQL --file merge.sql 2>PSQL_ERR
STATUS=$?
cat PSQL_ERR
test $STATUS = 0 || die "psql insert pages failed: exist status=$STATUS" 5
