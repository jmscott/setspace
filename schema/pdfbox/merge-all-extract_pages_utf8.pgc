/*
 *  Synopsis:
 *  	Merge pages in directory into pdfbox.extract_pages_{utf8,text,tsv}.
 *  Description:
 *
 *  Usage:
 *	merge-all-extract_pages_utf8 <udig> <ts_conf>
 *  Arguments:
 *  	1	udig of the pdf blob
 *	2	tsv vector configuration
 *  Exit Status:
 *  	0	ok, all pages were merged
 *	1	unexpected error
 *  Note:
 *	Should warns be logged but no cause an abort.  In particluar
 *	the error
 *
 *		'SQLWARNING: 54000: word is too long to be indexed'
 *
 *	seems to be harmless.  See pdf blob
 *
 *		bc160:47478b37abe3005eeaca9e1ef0c21788676d26e5
 *
 *	for an example of pages with words that can not be indexed.
 */
#include <fcntl.h>
#include <stdlib.h>
#include <unistd.h>

#include <stdio.h>

#include "jmscott/libjmscott.h"

char *jmscott_progname = "merge-all-extract_pages_utf8";
static char *usage = "merge-all-extract_pages_utf8 <udig> <tsvector config>";

#define EXIT_OK		0
#define EXIT_BAD	1

//  ignore these sql warnings

static struct jmscott_ecpg_state_fault no_warns[] =
{
	{"02000",	-1},	//  no data found due to upsert conflict 
	{"54000",	-1},	//  word is too long to be indexed
	{(char *)0,	-1}
};

static void
die(char *msg)
{
	jmscott_die(EXIT_BAD, msg);
}

static void
die2(char *msg1, char *msg2)
{
	jmscott_die2(EXIT_BAD, msg1, msg2);
}

static void
die3(char *msg1, char *msg2, char *msg3)
{
	jmscott_die3(EXIT_BAD, msg1, msg2, msg3);
}

static int
file_exists(char *path) {

	errno = 0;
	if (jmscott_access(path, F_OK) == 0)
		return 1;
	if (errno == ENOENT)
		return 0;
	die2("access(txt) failed", strerror(errno));

	/*NOT REACHED*/
	return 0;
}

/*
 *  slurp a stable file into a buffer, reallocing the buffer and size as needed.
 *  allocate an extra byte for null termination.
 *  return the number of bytes read.
 */
static ssize_t
slurp(char *what, char *path, void **buf, ssize_t *buf_size)
{
	struct stat st;

	if (jmscott_stat(path, &st) != 0)
		die3(what, "stat() failed", strerror(errno));

	//  alloc enough for file bytes plus null termination

	if (st.st_size + 1 > *buf_size) {
		void *p = realloc(*buf, st.st_size + 1);
		if (p == NULL)
			die3(what, "realloc() failed", strerror(errno));
		*buf = p;
		*buf_size = st.st_size + 1;
	}

	if (!*buf)
		die("slurp: unexpected null target buffer");

	int fd = jmscott_open(path, O_RDONLY, 0);
	if (fd < 0)
		die3(what, "open(exact) failed", strerror(errno));
	int status = jmscott_read_exact(fd, *buf, st.st_size);
	if (jmscott_close(fd) != 0 && status == 0)
		die3(what, "close(exact) failed", strerror(errno));

	switch (status) {
	case 0:
		return st.st_size;
	case -1:
		die3(what, "read(exact) failed", strerror(errno));
	case -2:
		die2(what, "read(exact): unexpected end-of-file");
	case -3:
		die2(what, "read(exact): unread bytes");
	}
	die2(what, "read(exact): unexpected status");

	/*NOT REACHED*/
	return 0;
}

int
main(int argc, char **argv)
{
EXEC SQL BEGIN DECLARE SECTION;
	char *pdf_blob;
	char *txt = 0;
	long txt_size = 0;
	char *ts_conf;
	char *page_udig = 0;
	long page_udig_size = 0;
	int page_number;
EXEC SQL END DECLARE SECTION;

	if (--argc != 2)
		jmscott_die_argc(EXIT_BAD, argc, 2, usage);

	close(1);

	//  frisk the pdf udig from argv[1]

	pdf_blob = argv[1];
	char *err;
	if ((err = jmscott_frisk_udig(pdf_blob)))
		die2("can not parse pdf udig", pdf_blob);

	// the configuration for the text search vectors

	ts_conf = argv[2];
	if (!ts_conf[0])
		die("zero length text search config");

	EXEC SQL WHENEVER SQLERROR CALL jmscott_ecpg_error(
		(struct jmscott_ecpg_state_fault *)0
	);
	EXEC SQL WHENEVER SQLWARNING CALL jmscott_ecpg_warning(no_warns);
	EXEC SQL CONNECT TO default;

	/*
	 *  Merge blob into pdfbox.page_text_utf8 table in single tx
	 */
	EXEC SQL BEGIN TRANSACTION;
	for (page_number = 1;  page_number < 2603538;  page_number++) {
		char path[13];
		int nread;

		//  read the page txt into memory from, say, 0000009.txt

		snprintf(path, sizeof path, "%07d.txt", page_number);
		if (!file_exists(path))
			break;
		nread = slurp("page txt", path, (void **)&txt, &txt_size);
		txt[nread] = 0;

		//  read the udig of the txt page from file <page number>.udig

		snprintf(path, sizeof path, "%07d.udig", page_number);
		nread = slurp("page udig",
				path,
				(void **)&page_udig,
				&page_udig_size
		);
		page_udig[nread - 1] = 0;	//  terminate at new line

		err = jmscott_frisk_udig(page_udig);
		if (err)
			die2("bad page text udig", err);

		EXEC SQL INSERT INTO pdfbox.extract_pages_utf8(
			pdf_blob,
			page_blob,
			page_number
		  ) VALUES (
			:pdf_blob::udig,
			:page_udig,
			:page_number
		  ) ON CONFLICT
			DO NOTHING
		;

		EXEC SQL INSERT INTO pdfbox.page_text_utf8(
			pdf_blob,
			page_number,
			txt
	  	  ) VALUES (
			:pdf_blob::udig,
			:page_number,
			:txt
	  	  ) ON CONFLICT
  			DO NOTHING
		;
	}
	if (txt) {
		free(txt);
		txt = 0;
	}
	/*
	 *  Refresh text search vectors for all pages in the pdf file.
	 */
	EXEC SQL INSERT INTO pdfbox.page_tsv_utf8(
		pdf_blob,
		page_number,
		ts_conf,
		tsv
	  ) SELECT
	  	pdf_blob,
		page_number,
		:ts_conf::regconfig,
		to_tsvector(:ts_conf::regconfig, txt)
	      FROM
	      	pdfbox.page_text_utf8
	      WHERE
	      	pdf_blob = :pdf_blob
	  ON CONFLICT
	  	DO NOTHING
	;
	EXEC SQL END TRANSACTION;

	_exit(EXIT_OK);
}
