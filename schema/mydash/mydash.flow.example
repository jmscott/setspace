#
#  Synopsis:
#	Merge blobs into tables in schema mydash, like tagged urls.
#  Usage:
#  	flowd server mydash.conf
#  See:
#  	mydash/lib/schema.sql
#  Note:
#	Need a better method for cleanup than waiting on all possible
#	combinations of exit status.  at the very least a compact,
#	vectorized version would be better than simple minded, error prone
#	enumeration.
#

boot
{
	brr_capacity = 256;
	flow_worker_count = 4;

	#
	#  No processes are invoked
	#
	#  Note:
	#	Since no workers can we set to 0?
	#
	os_exec_worker_count = 1;
	os_exec_capacity = 1;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"fallback_application_name=mydash.flow sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 4;
}

tail brr
{
	path = "spool/jsonio.brr";
}

command lock_in_flight
{
	path = "tas-run-lock";
	argv = (
		"in-flight"
	);
	exit_status is OK when in {
                0,			#  ok, lock file created
                1			#  blob already in flight
        };
}

call lock_in_flight(brr.udig);

command unlock_in_flight
{
	path = "tas-run-unlock";
	argv = (
		"in-flight"
	);
}

#
#  Is the blob a request to tag a url and does it already exist
#  in the database.
#
#	"mydash.schema.setspace.com": {
#		"tag-http": {}
#	}
#

sql query is_tag_http_json row
{
	statement = `
SELECT
	EXISTS (
	  SELECT
		blob
	    FROM
		jsonorg.jsonb_255
	    WHERE
		doc @> '{
			"mydash.schema.setspace.com":{
				"tag-http":{}
			}
		}'
		AND
		blob = $1::udig
	),
	EXISTS (
	  SELECT
	  	blob
	    FROM
	    	mydash.tag_http
	    WHERE
	    	blob = $1::udig
	);`;

	result row is (
		is_tag_http bool,
		tag_http_exists bool
	);
}

query is_tag_http_json(brr.udig)
  when
  	lock_in_flight.exit_status == 0
;

sql exec merge_tag_http
{
	statement = `
INSERT INTO mydash.tag_http (
	blob,
	url,
	discover_time
)
WITH request AS (
  SELECT
	doc->'mydash.schema.setspace.com'->'tag-http' AS tag_http
    FROM
  	jsonorg.jsonb_255
    WHERE
  	doc @> '{
		"mydash.schema.setspace.com":{
			"tag-http":{}
		}
	}'
	AND
	blob = $1::udig
) SELECT
  	$1::udig,
  	tag_http->'url',
	timestamptz 'epoch' +
		(tag_http->'discover-unix-epoch')::bigint * interval '1 second'
    FROM
    	request
    WHERE
    	length(tag_http->>'discover-unix-epoch') > 0
  ON CONFLICT
  	DO NOTHING
;
;
	`;
}

query merge_tag_http(brr.udig)
  when
  	is_tag_http_json.is_tag_http == true
	and
	is_tag_http_json.tag_http_exists == false
;

#
#  Note:
#	Need a better method for cleanup than waiting on all possible
#	combinations of exit status.  at the very least a compact,
#	vectorized version would be better than simple minded, error prone
#	enumeration.
#
call unlock_in_flight(brr.udig)
  when
  	lock_in_flight.exit_status == 0
	and
	(
		is_tag_http_json.is_tag_http == false
		or
		(
			is_tag_http_json.is_tag_http == true
			and
			(
				merge_tag_http.rows_affected == 0
				or
				merge_tag_http.rows_affected == 1
			)
		)
	)
;
