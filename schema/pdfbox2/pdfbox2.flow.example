#
#  Synopsis:
#	Populate a PostgreSQL schema with the facts extracted by Apache pdfbox2 
#  See:
#	schema.sql
#  Note:
#	How does a digested pdfbox2 get repushed to schema pgtexts?
#

boot
{
	brr_capacity = 16;
	flow_worker_count = 8;
	os_exec_worker_count = 4;
	os_exec_capacity = 4;

	xdr_roll_duration = "24h";
	fdr_roll_duration = "24h";
	qdr_roll_duration = "24h";

	heartbeat_duration = "10s";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name = "sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 8;
}

tail brr
{
	path = "spool/prefixio.brr";
}

command brr_on_network
{
	path = "true";
}

call brr_on_network()
  when
  (
        (
		brr.verb == "put"
		or
		brr.verb == "get"
		or
		brr.verb == "eat"
		or
		brr.verb == "wrap"
		or
		brr.verb == "roll"
	)
	and
	brr.chat_history == "ok"
  ) or (
	brr.verb == "give"
	and
	brr.chat_history == "ok,ok"
  )
;

sql query in_service_table row
{
	statement = `

	SELECT EXISTS (
	  SELECT
	  	blob
	    FROM
	    	setspace.service
	    WHERE
	    	blob = $1::udig
	);
	`;

	result row is (
		answer bool
	);
}

query in_service_table(brr.udig)
  when
  	brr_on_network.exit_status == 0
;

#
#  Note:
#	We need to differentiate possible PDF blobs from json blobs,
#	hence this query.  Eventually having two tail{} in same flow
#	file will elminate need for these redundant queries.
#
sql query prefix_is_percentPDF row
{
	statement = `

	SELECT
		substring(prefix, 1, 4) = '\x25504446'	-- %PDF
	  from
	  	setspace.byte_prefix_32
	  where
	  	blob = $1::udig
	`;

	result row is (
		answer bool
	);
}

query prefix_is_percentPDF(brr.udig)
  when
  	in_service_table.answer == true
;

sql query in_pddocument_table row
{
	statement = `

	SELECT
		EXISTS (
		  SELECT
		  	blob
		    FROM
		    	pdfbox2.pddocument
		    WHERE
		    	blob = $1::udig
		),
		(
		  SELECT
		  	exit_status = 0
		    FROM
		    	pdfbox2.pddocument
		    WHERE
		    	blob = $1::udig
		)
	;
	`;

	result row is (
		answer bool,
		is_pdf bool
	);

}

query in_pddocument_table(brr.udig)
  when
  	prefix_is_percentPDF.answer == true
;

sql query in_pddocument_pending_table row
{
	statement = `

	SELECT EXISTS (
	  SELECT
	  	blob
	    FROM
	    	pdfbox2.pddocument_pending
	    WHERE
		blob = $1::udig
	  )
	;
	`;

	result row is (
		answer bool
	);

}

query in_pddocument_pending_table(brr.udig)
  when
  	in_pddocument_table.answer == false
;

sql query merge_pddocument_pending row
{
	statement = `

	INSERT INTO
	  pdfbox2.pddocument_pending(
		blob
	  ) VALUES(
	  	$1::udig
 	  )  ON CONFLICT
	  	DO NOTHING
	  RETURNING
	  	true
	`;

	result row is (
		inserted bool
	);

}

query merge_pddocument_pending(brr.udig)
  when
  	in_pddocument_pending_table.answer == false
;

command pddocument2pg
{
	path = "sbin/pddocument2pg";
	exit_status is OK when in {0, 1};
}

call pddocument2pg(brr.udig)
  when
  	merge_pddocument_pending.inserted == true
;

command pddocument_exists
{
	path = "true";
}

call pddocument_exists(brr.udig)
  when
  	in_pddocument_table.is_pdf == true
  	or
  	pddocument2pg.exit_status == 0
;

sql query in_extract_utf8_table row
{
	statement = `
	
	SELECT EXISTS (
	  SELECT
		blob
	          FROM
	    	pdfbox2.extract_utf8
	         WHERE
	    	blob = $1::udig
	)
	`;

	result row is (
		answer bool
	);
}

query in_extract_utf8_table(brr.udig)
  when
  	pddocument_exists.exit_status == 0
;

sql query merge_extract_utf8_pending row
{
	statement = `

	INSERT INTO
	  pdfbox2.extract_utf8_pending(
		blob
	  ) VALUES(
	  	$1::udig
 	  )  ON CONFLICT
	  	DO NOTHING
	  RETURNING
	  	true
	`;

	result row is (
		inserted bool
	);
}

query merge_extract_utf8_pending(brr.udig)
  when
  	in_extract_utf8_table.answer == false
;

command extract_utf82pg
{
	path = "sbin/extract_utf82pg";
}

call extract_utf82pg(brr.udig)
  when
  	merge_extract_utf8_pending.inserted == true
;

command wait_utf8_byte_count
{
	path = "sbin/wait-utf8-byte_count";
	argv = (
		"16"
	);
	exit_status is OK when in {0, 1};
}

call wait_utf8_byte_count(brr.udig)
  when
  	extract_utf82pg.exit_status == 0
	or
	in_extract_utf8_table.answer == true
;
  
command append_pgtexts_brr
{
	path = "sbin/append-pgtexts-brr";
	argv = (
		"../pgtexts/spool/pdfbox2.brr"
	);
}

call append_pgtexts_brr(brr.udig)
  when
  	wait_utf8_byte_count.exit_status == 0
;
