/*
 *  Synopsis:
 *  	Merge stdout of command xmlwf into table expat2.xmlwf.
 *  Usage:
 *	merge-stdin-gunzip_uncompressed_name <udig>
 *  Arguments:
 *  	1	udig of blob
 *  Exit Status:
 *  	0	ok, tuple was merged
 *  	1	SQL error
 *  	2	general failure
 */

static char progname[] = "merge-gunzip_uncompressed_name";

#define EXIT_OK		0
#define EXIT_BAD_READ	2

#define COMMON_NEED_READ_READ
#include "../../common.c"

int
main(int argc, char **argv)
{
	int size;
	size_t len;
	char *sz;



EXEC SQL BEGIN DECLARE SECTION;
	char *stdout;
EXEC SQL END DECLARE SECTION;

	if (argc != 1)
		die(2, "wrong number of arguments");

	close(1);


	//  parse the udig as argv[1]
	blob = argv[1];
	len = strlen(blob);
	if (len < 34 || len > 255 || strchr(blob, ':') == NULL)
		die2(EXIT_BAD_UDIG, "syntax error in xml udig", blob);

	//  parse the blob size as argv[2]
	sz = argv[2];
	len = strlen(sz);
	if (len < 1 || len > 19)
		die2(EXIT_BAD_SIZE, "blob size not > 0 and < 20 chars", sz);

	//  need to validate that all chars are decimal digits
	size = atoi(sz);
	if (size < 0)
		die2(EXIT_BAD_SIZE, "atoi(blob size) <= 0", sz);

	//  allocate the xml buffer plus null byte
	stdout = malloc(size + 1);
	if (stdout == NULL)
		die2(EXIT_BAD_MALLOC, "malloc(blob) failed", sz);
	stdout[size] = 0;

	_read_blob(0, stdout, size);

	EXEC SQL WHENEVER SQLERROR CALL _ecpg_sql_error(
		(struct _ecpg_sql_state_fault *)0
	);
	EXEC SQL WHENEVER SQLWARNING CALL _ecpg_sql_warning(no_warn);
	EXEC SQL CONNECT TO default;

	EXEC SQL BEGIN TRANSACTION;
	/*
	 *  Merge blob into expat2.xmlwf_utf8 table.
	 */
	EXEC SQL INSERT INTO expat2.xmlwf_utf8(
		blob,
		stdout
	  ) VALUES (
		:blob::udig,
		:stdout
	  )
  	  ON CONFLICT
  		DO NOTHING
	;
	EXEC SQL END TRANSACTION;

	_exit(EXIT_OK);
}
