/*
 *  Synopsis:
 *  	Merge the output of the putPDDocumentInformation into the database
 *  Usage:
 *	merge-stdin-file 
 *  Arguments:
 *  	1	udig of the blob that file command analyzed
 *	2	exit status of java putPDDocumentInformation.class
 *  	3	number of bytes to read on the standard input
 *  Exit Status:
 *  	0	ok, tuple was merged
 *  	1	wrong number of arguments
 *  	2	can not parse input blob size
 *  	3	malloc() of input blob buffer failed
 *	4	read() of standard input failed
 *	5	syntax error on udig
 *	6	sql error
 *	7	sql warning
 *	8	input field blob too small
 *	9	input field blob too large
 *  See:
 *	putPDDocumentInformation.java
 *  Note:
 *	Is VARCHAR truly allocated in characters (not bytes)?
 *
 *	The syntax of the field file is assumed to be correct.
 *	Probably ought to add at least a few inexpensive tests.
 *
 *	To the output consider framing the headers with Begin/End.
 *
 *		Begin:
 *		Title: ...
 *		...
 *		End:
 */

static char progname[] = "merge-stdin-pddocument_information";

#define EXIT_OK		0
#define EXIT_BAD_ARGC	1
#define EXIT_BAD_SIZE	2
#define EXIT_BAD_MALLOC 3
#define EXIT_BAD_READ	4
#define EXIT_BAD_UDIG	5
#define EXIT_SQLERROR	6
#define EXIT_SQLWARN	7
#define EXIT_BLOB_SMALL 8
#define EXIT_BLOB_BIG	9

#define COMMON_NEED_READ_BLOB
#define COMMON_NEED_A2UI32
#include "../../common.c"

#define COMMON_ECPG_NEED_SQL_WARNING
#define COMMON_ECPG_NEED_SQL_ERROR
#include "../../common-ecpg.c"

//  ignore these sql errors

static struct _ecpg_sql_state_fault no_warn[] =
{
        {"02000", 0},                //  no data for conflict on upsert/insert
        {(char *)0, 0}
};

static char *input = NULL;
static char *input_limit = NULL;

//  Scan a field name.  Code depends upon syntacically correct fields file
//  generated by putPDDocumentInformation.  An incorrect file format could
//  cause memory corruption.
//
//  Note: is the empty string handled correctly?

static void
scan(
	char *field_name,
	char arr[32768],
	int *len,
	int *is_null
) {
	static char peek_field_name[18];
	static char peek_arr[32768];
	static int peek_len = -1;
	char *p, *q;


	if (input >= input_limit)
		return;

	//  has a field been scanned but not consumed?

	if (peek_len == -1) {
		p = input;
		peek_len = 0;

		// scan field name up to colon

		q = peek_field_name;
		while (*p != ':')
			*q++ = *p++;
		*q = 0;

		//  skip colon and space

		p += 2;

		// scan field value up to new-line  

		q = peek_arr;
		while (*p != '\n')
			*q++ = *p++;
		*q = 0;

		peek_len = q - peek_arr;
		input = ++p;
	}

	//  is this the field we are looking for?

	if (strcmp(field_name, peek_field_name) != 0)
		return;

	strcpy(arr, peek_arr);
	*len = peek_len;
	*is_null = 0;

	peek_len = -1;
}

int
main(int argc, char **argv)
{
	size_t len;
	char *sz;
	int input_size = 0;

EXEC SQL BEGIN DECLARE SECTION;
	char *blob;
	char *exit_status;

	VARCHAR title[32768];
	int title_ind = -1;

	VARCHAR author[32768];
	int author_ind = -1;

	VARCHAR creation_date[32768];
	int creation_date_ind = -1;

	VARCHAR creator[32768];
	int creator_ind = -1;

	VARCHAR keywords[32768];
	int keywords_ind = -1;

	VARCHAR modification_date[32768];
	int modification_date_ind = -1;

	VARCHAR producer[32768];
	int producer_ind = -1;

	VARCHAR subject[32768];
	int subject_ind = -1;

	VARCHAR trapped[32768];
	int trapped_ind = -1;

EXEC SQL END DECLARE SECTION;

	if (argc != 4)
		die(EXIT_BAD_ARGC, "wrong number of arguments");

	close(1);

	//  parse the pdf udig as argv[1]

	blob = argv[1];
	len = strlen(blob);
	if (len < 34 || len > 264 || strchr(blob, ':') == NULL)
		die2(EXIT_BAD_UDIG, "syntax error in pdf udig", blob);

	exit_status = argv[2];

	//  scan the input blob size.
	//  Note: need to move this code to ../../common.c

	sz = argv[3];
	input_size = a2ui32(sz, "input pdf blob size", EXIT_BAD_SIZE);

	//  allocate the mime fields buffer plus null byte

	input = malloc(input_size + 1);
	if (input == NULL)
		die2(EXIT_BAD_MALLOC, "malloc(input blob) failed", sz);
	input[input_size] = 0;
	input_limit = input + input_size;

	_read_blob(0, input, input_size);

	scan("Title", title.arr, &title.len, &title_ind);
	scan("Author", author.arr, &author.len, &author_ind);
	scan("Subject", subject.arr, &subject.len, &subject_ind);
	scan("Keywords", keywords.arr, &keywords.len, &keywords_ind);
	scan("Creator", creator.arr, &creator.len, &creator_ind);
	scan("Producer", producer.arr, &producer.len, &producer_ind);
	scan("Creation Date", creation_date.arr, &creation_date.len,
					&creation_date_ind);
	scan("Modification Date", modification_date.arr, &modification_date.len,
					&modification_date_ind);
	scan("Trapped", trapped.arr, &trapped.len, &trapped_ind);

	EXEC SQL WHENEVER SQLERROR CALL _ecpg_sql_error(
		(struct _ecpg_sql_state_fault *)0);
	EXEC SQL WHENEVER SQLWARNING CALL _ecpg_sql_warning(no_warn);
	EXEC SQL CONNECT TO default;

	EXEC SQL BEGIN TRANSACTION;

	/*
	 *  Merge blob into fffile.file_type table.
	 */
	EXEC SQL INSERT INTO pdfbox.pddocument_information(
		blob,
		exit_status,
		title,
		author,
		creation_date,
		creator,
		keywords,
		modification_date,
		producer,
		subject,
		trapped
	  ) VALUES (
		:blob,
		:exit_status::smallint,
		:title INDICATOR :title_ind,
		:author INDICATOR :author_ind,
		:creation_date INDICATOR :creation_date_ind,
		:creator INDICATOR :creator_ind,
		:keywords INDICATOR :keywords_ind,
		:modification_date INDICATOR :modification_date_ind,
		:producer INDICATOR :producer_ind,
		:subject INDICATOR :subject_ind,
		:trapped INDICATOR :trapped_ind
	  )
  	  ON CONFLICT
  		DO NOTHING
	;
	EXEC SQL END TRANSACTION;

	_exit(EXIT_OK);
}
