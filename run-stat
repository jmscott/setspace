#
#  Synopsis:
#	Summarize process stats and duration by examining *.pid files.
#  Usage:
#	run-stat
#  Note:
#	Probing process existence with pgrep might be useful.
#	Not clear if another script should do this.
#
STALE_AFTER=60

die()
{
	echo "$(basename $0): ERROR: $@" >&2
	exit 1
}

_stat_pid()
{
	SCHEMA=$1

	#
	#  if the file <schema>.flow exists, then the process flowd should be
	#  running; #  otherwise, the flowd process is intentionally off.
	#
	FLOW=$SCHEMA/etc/$SCHEMA.flow

	if [ -e $FLOW ];  then
		PID_PATH=$SCHEMA/run/flowd.pid
		SINCE=UNKNOWN

		stale-mtime $STALE_AFTER $PID_PATH
		STATUS=$?
		case $STATUS in
		0)
			SINCE=$(perl -e "print((stat('$PID_PATH'))[9]);")
			STATE=ZOMBIE
			;;
		1)
			STATE=UP
			SINCE=$(head -2 $PID_PATH | tail -1)
			;;
		2)
			STATE=DOWN
			;;
		*)
			die "stale-mtime failed: exit status=$?"
			;;
		esac
	else
		SINCE=N/A
		STATE=OFF
	fi
	echo "$SCHEMA	$STATE	$SINCE"
}

test $# = 0 || die "wrong number cli arguments: got $#, expected 0"

test -n "$SETSPACE_ROOT" || die "environment not defined: SETSPACE_ROOT"
SCHEMA=$SETSPACE_ROOT/schema
cd $SCHEMA || die "cd $SCHEMA exit status=$?"

find . -mindepth 1 -maxdepth 1 -type d | while read SCHEMA;  do
	_stat_pid $(basename $SCHEMA)
done
