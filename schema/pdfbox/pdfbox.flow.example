#
#  Synopsis:
#	Populate the schema "pdfbox" usng java code from pdfbox.apache.org
#  Description:
#	Populate following tables in schema "pdfbox"
#		pddocument
#		pddocument_information
#		extract_pages_utf8
#		page_text_utf8
#		page_tsv_utf8
#	
#  See:
#	pdfbox/lib/schema.sql
#  Note:
#	Faulting needs to be upsertd into this flow and not in bash scripts!
#

boot
{
	brr_capacity = 8;
	flow_worker_count = 4;
	os_exec_worker_count = 4;
	os_exec_capacity = 4;

	xdr_roll_duration = "168h";
	fdr_roll_duration = "168h";
	qdr_roll_duration = "168h";

	heartbeat_duration = "1m";
}

sql database setspace
{
	driver_name = "postgres";
	data_source_name =
		"search_path=pdfbox,setspace fallback_application_name=pdfbox.flow sslmode=disable";
	max_idle_conns = 0;
	max_open_conns = 8;
}

tail brr
{
	#path = "support/resync/spool/fs.brr";
	path = "spool/prefixio.brr";
}

sync map first_seen[string]bool;

sql query in_service row
{
	result row is (
		exists		bool
	);
	statement = `

	SELECT
	  EXISTS (
	    SELECT
	  	true
	      FROM
	    	pdfbox.service
	      WHERE
	    	blob = $1::udig
	  )
	`;
}

query in_service(brr.udig)
  when
  	first_seen.LoadOrStore(brr.udig, true).loaded == false
;

command eat_blob
{
	path = "blobio";
	argv = (
		"eat",
		"--service",
		"fs:${BLOBIO_ROOT}",
		"--udig"
	);
	exit_status is OK when in {
		0,			#  blob exists
		1			#  blob does not exist
	};
}

call eat_blob(brr.udig)
  when
  	in_service.exists == false
;

sql query blob_state row
{
	result row is (
		exists	bool
	);
	statement = `
	SELECT EXISTS (
	  SELECT
	  	true
	    FROM
	    	pdfbox.blob
	    WHERE
	    	blob = $1::udig
	);`;
}

query blob_state(brr.udig)
  when
  	eat_blob.exit_status == 0
;

sql exec upsert_blob
{
	statement = `
	INSERT INTO pdfbox.blob(
		blob,
		discover_time
	  ) VALUES (
	    	$1::udig,
		$2::inception
	  ) ON CONFLICT (blob) DO UPDATE SET
	    	discover_time = $2::inception
	    WHERE
	      	blob.discover_time > EXCLUDED.discover_time
	 ;
	`;
}

query upsert_blob(brr.udig, brr.start_time)
  when
  	blob_state.exists == false
;

sql query pddocument_state row
{
	result row is (
		exists		bool,
		in_fault	bool
	);
	statement = `
	  SELECT
	    EXISTS (
	    	SELECT
			true
		  FROM
		  	pddocument
		  WHERE
		  	blob = $1::udig
	   ),
	   EXISTS (
	     SELECT
	     	true
	      FROM
	      	setops.flowd_call_fault
	      WHERE
	      	schema_name = 'pdfbox'
		AND
		command_name = 'upsert_pddocument'
		AND
		blob = $1::udig
	  )
	`;
}

query pddocument_state(brr.udig)
  when
  	upsert_blob.sqlstate == "00000"
	or
	blob_state.exists == true
;

command upsert_pddocument
{
	path = "sbin/upsert-pddocument";
}

call upsert_pddocument(brr.udig)
  when
  	pddocument_state.exists == false
	and
	pddocument_state.in_fault == false
;

sql exec upsert_pddocument_fault
{
	statement = `
	INSERT INTO setops.flowd_call_fault(
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		signal,
		fault_time
	) VALUES (
		'pdfbox',
		'upsert_pddocument',
		$1::udig,
		'ERR',
		$2::smallint,
		0,
		now()
	)
	`;
}

query upsert_pddocument_fault(brr.udig, upsert_pddocument.exit_status)
  when
  	upsert_pddocument.exit_status != 0
;

sql query pddocument_information_state row
{
	result row is (
		exists		bool,
		in_fault	bool
	);
	statement = `
	SELECT
	  EXISTS (
	    SELECT
	    	true
	      FROM
	      	pddocument_information
	      WHERE
	      	blob = $1::udig
	  ),
	  EXISTS (
	    SELECT
	    	true
	      FROM
	      	setops.flowd_call_fault
	      WHERE
	      	schema_name = 'pdfbox'
		AND
		command_name = 'upsert_pddocument_information'
		AND
		blob = $1::udig
	  )`;
}

query pddocument_information_state(brr.udig)
  when
	#
	#  either already in table pddocument or was just upserted
	#
  	pddocument_state.exists == true
	or
	upsert_pddocument.exit_status == 0
;

command upsert_pddocument_information
{
	path = "sbin/upsert-pddocument_information";
}

call upsert_pddocument_information(brr.udig)
  when
  	pddocument_information_state.exists == false
	and
	pddocument_information_state.in_fault == false
;

sql exec upsert_pddocument_information_fault
{
	statement = `
	INSERT INTO setops.flowd_call_fault(
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		signal,
		fault_time
	) VALUES (
		'pdfbox',
		'upsert_pddocument_information',
		$1::udig,
		'ERR',
		$2::smallint,
		0,
		now()
	)
	`;
}

query upsert_pddocument_information_fault(
	brr.udig,
	upsert_pddocument_information.exit_status
  ) when
  	upsert_pddocument_information.exit_status != 0
	and
	upsert_pddocument_information.exit_status != 1
;

command upsert_extract_pages_utf8
{
	path = "upsert-extract_pages_utf8";
	argv = (
		"english"
	);
	exit_status is OK when in {
                0      #  ok, extracted pddocument info and stored into PG
        };
}

#  determine if the pages of the pdf have been extracted.

sql query extract_pages_utf8_state row
{
	statement = `

	SELECT
		--  extract_pages_utf8: does row exist in table

		EXISTS (
		  SELECT
		  	true
		    FROM
		    	pdfbox.extract_pages_utf8
		    WHERE
		    	pdf_blob = $1::udig
		)extract_pages_utf8_state,
		EXISTS (
		  SELECT
		  	true
		    FROM
		    	setops.flowd_call_fault
		    WHERE
		    	schema_name = 'pdfbox'
			and
		    	command_name = 'upsert_extract_pages_utf8'
			AND
		    	blob = $1::udig
		)
	;
	`;

	result row is (
		exists		bool,
		in_fault	bool
	);
}

query extract_pages_utf8_state(brr.udig)
  when
  	pddocument_state.exists == true
	or
	upsert_pddocument.exit_status == 0
;

call upsert_extract_pages_utf8(brr.udig)
  when
  	extract_pages_utf8_state.exists == false
	and
	extract_pages_utf8_state.in_fault == false
;

sql exec upsert_extract_pages_utf8_fault
{
	statement = `
	INSERT INTO setops.flowd_call_fault(
		schema_name,
		command_name,
		blob,
		exit_class,
		exit_status,
		signal,
		fault_time
	) VALUES (
		'pdfbox',
		'upsert_extract_pages_utf8',
		$1::udig,
		'ERR',
		$2::smallint,
		0,
		now()
	)
	`;
}

query upsert_extract_pages_utf8_fault(
	brr.udig,
	upsert_extract_pages_utf8.exit_status
  ) when
  	upsert_extract_pages_utf8.exit_status != 0
	and
	upsert_extract_pages_utf8.exit_status != 1
;
