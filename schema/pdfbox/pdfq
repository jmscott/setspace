#!/bin/bash
#
#  Synopsis:
#	Engligh fulltext, phrase or keyword query of tables in pdfbox schema.
#  Usage:
#	pdfq <sql> [txt-query:]'query' [limit [offset [rank_norm]]]
#
#	#  <sql> 	is in {page, page/count, p2q}
#	#  [txt-query]	is in {fts, phrase, p, keyword, key, k}
#
#	#  query defaults:
#	#	result row limit: 10
#	#	result row offset: 0
#	#	text search config: 'english'
#	#	page level rank normalization: 14
#
#	pdfq page fts:'(suffix | spanning) <-> tree'
#	pdfq page/count fts:'(suffix | spanning) <-> tree'
#
#	pdfq page phrase:'suffix tree ...'
#	pdfq page p:'suffix tree ...'
#	pdfq page/count p:'suffix tree ...'
#
#	pdfq page keyword:'trump putin' 100
#	pdfq page key:'trump putin' 100 200
#	pdfq page k:'trump putin' 100
#	pdfq page keywords:'trump putin' 100
#
#	pdfq p2q 'Compact Proofs of Retrievability'
#
#  Exit Status:
#	0	Matching count and tuples written to standard output
#	1	psql internal error (e.g., out of memory)
#	2	bad database connection
#	3	error in sql script with ON_ERROR_STOP set
#	4	script invocation or setup error
#  Environment:
#	PDFBOX_ROOT
#	PostgreSQL PG* variables
#  See Also:
#	$PDFBOX_ROOT/lib/page-text-utf8-fts[-count].sql
#	$PDFBOX_ROOT/lib/page-text-utf8-phrase[-count].sql
#	$PDFBOX_ROOT/lib/page-text-utf8-keyword[-count].sql
#  Note:
#	Rename script 'pdfq' to pdfboxq.
#
#	Option process is broken!!  For example, no way to specify
#	the text search.  Need to rewrite script for [--options]
#
#	Special gripe when $2 ~~ '.*:.*'
#
PROG=pdfq

#
#  RANK_NORM = 2 | 4 | 8
#
#	2 divides the rank by the document length
#	4 divides the rank by the mean harmonic distance between extents
#	8 divides the rank by the number of unique words in document
#
RANK_NORM=14
LIMIT=10
OFFSET=0

TS_CONF=english			#  Note: ought to be pg_catalog.english?

Q=
SQL_FILE=
RANK_NORM=14
Q_VAR=

PSQL_OPTS='--quiet --no-psqlrc'

die()
{
	echo "$PROG: ERROR: $1" >&2
	exit $2
}

arg_is_number()
{
	case "$2" in
	[0-9]*)
		;;
	*)
		die "$1 is not a number: $2" 4
		;;
	esac
}

#  parse/extract <type>:'query words' from the second argument

escape_sql_var()
{
	echo "$1" | sed "s/'/''/g" | sed 's/\\/\\\\/g'
}

parse_query()
{
	QARG="$1"
	case "$QARG" in

	keyword:*|keywords:*|key:*|k:*)
		Q=$(echo "$QARG" | sed 's/^k[^:]*://')
		Q_VAR=keyword
		SQL_FILE=page-keyword.sql
		;;

	phrase:*|p:*)
		Q=$(echo "$QARG" | sed 's/^p[^:]*://')
		Q_VAR=phrase
		SQL_FILE=page-phrase.sql
		;;

	fts:*)
		Q=$(echo "$QARG" | sed 's/^fts[^:]*://')
		Q_VAR=ts_query
		SQL_FILE=page-fts.sql
		;;
	'')
		die 'empty query type prefix' 4
		;;
	:*)
		die 'no query type before colon' 4
		;;
	*:*)
		die "unknown query type: $(echo "$QARG" | sed 's/:.*//')" 4
		;;
	*)
		die "missing query type prefix: $QARG" 4
		;;
	esac

	#  escape quotes and backslash

	Q=$(escape_sql_var "$Q")

	return 0
}

test -n "$SETSPACE_ROOT" || die 'environment not defined: SETSPACE_ROOT' 4
test $# -gt 1 || die 'wrong number of arguments' 4

PDFBOX_ROOT=$SETSPACE_ROOT/schema/pdfbox

case "$1" in
page)
	;;
p2q|p2tsv|phrase2tsv|phrase2tsquery)
	test $# = 2 || die 'wrong number of arguments' 4
	Q=$(escape_sql_var "$2")

	#  query the count version of the sql file
	SQL_FILE=phraseto_tsquery.sql

	psql $PSQL_OPTS							\
	  --file $PDFBOX_ROOT/lib/$SQL_FILE				\
	  --set ts_conf="'$TS_CONF'"					\
	  --set phrase="'$Q'"						||
		die "psql $1 failed: exit status=$?" 3
	exit 0
	;;

page/count|pc|pagec|page-count)
	test $# = 2 || die 'wrong number of arguments' 4
	parse_query "$2" || exit 4

	#  query the count version of the sql file
	SQL_FILE=$(
		echo $SQL_FILE						|
		sed 's/-\([^-]*\)\.sql$/-count-\1.sql/'
	)

	psql $PSQL_OPTS							\
	  --file $PDFBOX_ROOT/lib/$SQL_FILE				\
	  --set ts_conf="'$TS_CONF'"					\
	  --set $Q_VAR="'$Q'"						||
		die "psql $1 failed: exit status=$?" 3
	exit 0
	;;
*)
	die "unknown action: $1" 4
	;;
esac

test $# -lt 5 || die 'wrong number of arguments' 4

parse_query "$2" || exit 4

#  extract optional result row limit

if [ $# -ge 3 ];  then
	arg_is_number limit "$3" || exit 4
	LIMIT=$3
fi

#  extract optional result row offset

if [ $# -ge 4 ];  then
	arg_is_number offset "$4" || exit 4
	OFFSET=$4
fi

if [ $# -eq 5 ];  then
	arg_is_number rank_norm "$5" || exit 4
	RANK_NORM=$5
fi

#  parse page level ranking normalization facor

psql	--quiet								\
	--no-psqlrc 							\
	--file $PDFBOX_ROOT/lib/$SQL_FILE				\
	--set ts_conf="'$TS_CONF'"					\
	--set $Q_VAR="'$Q'"						\
	--set limit="$LIMIT" 						\
	--set offset="$OFFSET" 						\
	--set rank_norm=$RANK_NORM					||
		die "psql failed: exit status=$?" 3
