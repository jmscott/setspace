#!/usr/bin/env bash
# 
#  Synopsis:
#	Merge commands in <schema>/etc/<schema>.flow in table flowd_command
#  Usage:
#	upsert-flowd_command <schema1> <schema2> ...
#	echo "$SCHEMAs" | upsert-flowd_command
#  Exit Status:
#	0	all schemas upserted into table flowd_command
#	1	unexpected error upserting command into table
#

PROG=$(basename $0)
PSQL='psql
	--quiet
	--no-psqlrc
	--no-readline

'
SQL=schema/setops/lib/upsert-flowd_command.sql

die()
{
	local MSG="ERROR: $@"
	FAULT="$(date): $MSG"
	test -d run && (
		echo $FAULT >>run/$PROG.fault				||
			echo "WARN: echo >run/fault failed: exit status=$?" >&2
	)

	echo "$PROG: $FAULT" >&2
	exit 1
}

test -n "$SETSPACE_ROOT" || die 'env not defined: SETSPACE_ROOT'
cd $SETSPACE_ROOT || die "cd SETSPACE_ROOT failed: exit status=$?"

. etc/profile || die ". etc/profile failed: exit status=$?"

upsert_schema_command()
{
	local SCHEMA=$1
	local FLOW="schema/$SCHEMA/etc/$SCHEMA.flow"

	test -e $FLOW || return 0
	awk '$0 ~ /^command/ {print $2}' $FLOW | while read CMD;  do
		case "$CMD" in
		[a-z]*)
			;;
		*)
			die "unexpected command: $CMD"
			;;
		esac

		$PSQL --file $SQL --set sch=$SCHEMA --set cmd=$CMD 	||
			die "psql upsert failed: exit status=$?"
	done
}

case $# in
0)
	while read SCH;  do
		upsert_schema_command $SCH				||
			die "upsert_schema_command failed: exit status=$?"
	done
	;;
*)
	for SCH in $@;  do
		upsert_schema_command $SCH				||
			die "upsert_flowd_command failed: exit status=$?"
	done
	;;
esac
exit 0
