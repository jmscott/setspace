#!/usr/bin/env bash
#
#  Synopsis:
#	Command line front end to sql queries for all schemas.
#  Usage:
#	ssq			#  help
#	ssq help		#  help
#	ssq ls			#  list schemas
#	ssq setcore		#  help for "setcore" schema
#	ssq setcore help	#  help for "setcore" schema
#  Note:
#	Consider rewriting in perl.
#
#	Add ability to pass CLI args to PSQL
#
#		SETSPACE_SSQ_PSQL_ARGV='--var=timing=on'
#
#	Think about command
#
#		ssq <udig>
#
#	to list all schemas containing a blob.  This implies each schema
#	contains a table/view: <schema>.service.
#
#	Thinks about count stats to command 'ssq ls'
#

die()
{
	cat >&2 <<END
ERROR: $@
usage: ssq [ls | help | [<schema>] [...options]]
END
	exit 1
}

help()
{
	cat <<END
Usage:
	$(PROG)					#  list help
	$(PROG) help				#  ..
	$(PROG) ls				#  list queryable schemas
	$(PROG) <schema>			#  help for particulare schema
	$(PROG) <schema> [action] [...options]	#  schema specfic queries
Environment:
	SETSPACE_ROOT		$SETSPACE_ROOT
END
}

#  help message
if [ $# = 0 -o \( $# = 1 -a \( "$1" = help -o "$1" = --help \) \) ];  then
	help
	exit 0
fi

test -n "$SETSPACE_ROOT" || die "env not defined: SETSPACE_ROOT"
cd $SETSPACE_ROOT || die "cd failed: $SETSPACE_ROOT"
test -r etc/profile && . etc/profile

SCHEMAS=$(
	find-schema | while read SCH;  do
		test -e schema/$SCH/libexec/ssq-$SCH && echo $SCH
	done
)
test -n "$SCHEMAS" || die "no schemas in $SETSPACE_ROOT/schema"

ls_schema()
{
	(
		cat <<END
Schema
--------
END
		echo $SCHEMAS | tr ' ' '\n' | while read SCH;  do
			echo $SCH
		done
	) | column -s ' ' -t | sed 's/ *        //'
}

ACTION=$1
shift

if [ "$ACTION" = ls ];  then
	test $# = 0 || die "ls: wrong argument count: expected 0, got $#"

	ls_schema
	exit 0
fi

SCHEMA=$ACTION

SCHEMA_ROOT=$SETSPACE_ROOT/schema/$SCHEMA
test -d $SCHEMA_ROOT || die "no directory for schema: $SCHEMA"
cd $SCHEMA_ROOT || die "cd schema root failed: $SCHEMA_ROOT"
test etc/profile && . etc/profile
SCHEMA_EXEC=libexec/ssq-$SCHEMA
test -x $SCHEMA_EXEC || die "no executable: $SCHEMA_EXEC"

exec $SCHEMA_EXEC "$@"
